{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":937769,"sourceType":"datasetVersion","datasetId":507452},{"sourceId":8684298,"sourceType":"datasetVersion","datasetId":5206496},{"sourceId":8693096,"sourceType":"datasetVersion","datasetId":5212965},{"sourceId":8712205,"sourceType":"datasetVersion","datasetId":5226574},{"sourceId":9192282,"sourceType":"datasetVersion","datasetId":5556999},{"sourceId":9192290,"sourceType":"datasetVersion","datasetId":5557005},{"sourceId":9227980,"sourceType":"datasetVersion","datasetId":5508864},{"sourceId":182828351,"sourceType":"kernelVersion"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## Dataset preprocessing\n\n### I load the dataset. I turn the label from text to numeric ob-0, subj-1","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"code","source":"!pip install lftk\n!pip install seaborn\n# !pip install --upgrade transformers\n# !pip install --upgrade vllm","metadata":{"execution":{"iopub.status.busy":"2024-08-22T23:55:56.696690Z","iopub.execute_input":"2024-08-22T23:55:56.697097Z","iopub.status.idle":"2024-08-22T23:56:27.812578Z","shell.execute_reply.started":"2024-08-22T23:55:56.697061Z","shell.execute_reply":"2024-08-22T23:56:27.811035Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Collecting lftk\n  Downloading lftk-1.0.9.tar.gz (2.3 MB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.3/2.3 MB\u001b[0m \u001b[31m8.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m:00:01\u001b[0m\n\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25ldone\n\u001b[?25hRequirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from lftk) (2.2.2)\nCollecting ndjson (from lftk)\n  Downloading ndjson-0.3.1-py2.py3-none-any.whl.metadata (3.2 kB)\nRequirement already satisfied: spacy in /opt/conda/lib/python3.10/site-packages (from lftk) (3.7.4)\nRequirement already satisfied: numpy>=1.22.4 in /opt/conda/lib/python3.10/site-packages (from pandas->lftk) (1.26.4)\nRequirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas->lftk) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->lftk) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas->lftk) (2023.4)\nRequirement already satisfied: spacy-legacy<3.1.0,>=3.0.11 in /opt/conda/lib/python3.10/site-packages (from spacy->lftk) (3.0.12)\nRequirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from spacy->lftk) (1.0.5)\nRequirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /opt/conda/lib/python3.10/site-packages (from spacy->lftk) (1.0.10)\nRequirement already satisfied: cymem<2.1.0,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from spacy->lftk) (2.0.8)\nRequirement already satisfied: preshed<3.1.0,>=3.0.2 in /opt/conda/lib/python3.10/site-packages (from spacy->lftk) (3.0.9)\nRequirement already satisfied: thinc<8.3.0,>=8.2.2 in /opt/conda/lib/python3.10/site-packages (from spacy->lftk) (8.2.3)\nRequirement already satisfied: wasabi<1.2.0,>=0.9.1 in /opt/conda/lib/python3.10/site-packages (from spacy->lftk) (1.1.3)\nRequirement already satisfied: srsly<3.0.0,>=2.4.3 in /opt/conda/lib/python3.10/site-packages (from spacy->lftk) (2.4.8)\nRequirement already satisfied: catalogue<2.1.0,>=2.0.6 in /opt/conda/lib/python3.10/site-packages (from spacy->lftk) (2.0.10)\nRequirement already satisfied: weasel<0.4.0,>=0.1.0 in /opt/conda/lib/python3.10/site-packages (from spacy->lftk) (0.3.4)\nRequirement already satisfied: typer<0.10.0,>=0.3.0 in /opt/conda/lib/python3.10/site-packages (from spacy->lftk) (0.9.0)\nRequirement already satisfied: smart-open<7.0.0,>=5.2.1 in /opt/conda/lib/python3.10/site-packages (from spacy->lftk) (6.4.0)\nRequirement already satisfied: tqdm<5.0.0,>=4.38.0 in /opt/conda/lib/python3.10/site-packages (from spacy->lftk) (4.66.4)\nRequirement already satisfied: requests<3.0.0,>=2.13.0 in /opt/conda/lib/python3.10/site-packages (from spacy->lftk) (2.32.3)\nRequirement already satisfied: pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4 in /opt/conda/lib/python3.10/site-packages (from spacy->lftk) (2.5.3)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from spacy->lftk) (3.1.2)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from spacy->lftk) (69.0.3)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from spacy->lftk) (21.3)\nRequirement already satisfied: langcodes<4.0.0,>=3.2.0 in /opt/conda/lib/python3.10/site-packages (from spacy->lftk) (3.4.0)\nRequirement already satisfied: language-data>=1.2 in /opt/conda/lib/python3.10/site-packages (from langcodes<4.0.0,>=3.2.0->spacy->lftk) (1.2.0)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->spacy->lftk) (3.1.1)\nRequirement already satisfied: annotated-types>=0.4.0 in /opt/conda/lib/python3.10/site-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy->lftk) (0.6.0)\nRequirement already satisfied: pydantic-core==2.14.6 in /opt/conda/lib/python3.10/site-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy->lftk) (2.14.6)\nRequirement already satisfied: typing-extensions>=4.6.1 in /opt/conda/lib/python3.10/site-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy->lftk) (4.9.0)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas->lftk) (1.16.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3.0.0,>=2.13.0->spacy->lftk) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3.0.0,>=2.13.0->spacy->lftk) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3.0.0,>=2.13.0->spacy->lftk) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3.0.0,>=2.13.0->spacy->lftk) (2024.2.2)\nRequirement already satisfied: blis<0.8.0,>=0.7.8 in /opt/conda/lib/python3.10/site-packages (from thinc<8.3.0,>=8.2.2->spacy->lftk) (0.7.11)\nRequirement already satisfied: confection<1.0.0,>=0.0.1 in /opt/conda/lib/python3.10/site-packages (from thinc<8.3.0,>=8.2.2->spacy->lftk) (0.1.5)\nRequirement already satisfied: click<9.0.0,>=7.1.1 in /opt/conda/lib/python3.10/site-packages (from typer<0.10.0,>=0.3.0->spacy->lftk) (8.1.7)\nRequirement already satisfied: cloudpathlib<0.17.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from weasel<0.4.0,>=0.1.0->spacy->lftk) (0.16.0)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->spacy->lftk) (2.1.3)\nRequirement already satisfied: marisa-trie>=0.7.7 in /opt/conda/lib/python3.10/site-packages (from language-data>=1.2->langcodes<4.0.0,>=3.2.0->spacy->lftk) (1.1.1)\nDownloading ndjson-0.3.1-py2.py3-none-any.whl (5.3 kB)\nBuilding wheels for collected packages: lftk\n  Building wheel for lftk (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Created wheel for lftk: filename=lftk-1.0.9-py3-none-any.whl size=2359766 sha256=97f1ca11582f548147bc3fc003e103fe802070d74aa957116b7e7ad1f05e5ce4\n  Stored in directory: /root/.cache/pip/wheels/51/3e/19/8a82ad750c6321373b8557b6cf4f35241ac04a9aefd8a489a7\nSuccessfully built lftk\nInstalling collected packages: ndjson, lftk\nSuccessfully installed lftk-1.0.9 ndjson-0.3.1\nRequirement already satisfied: seaborn in /opt/conda/lib/python3.10/site-packages (0.12.2)\nRequirement already satisfied: numpy!=1.24.0,>=1.17 in /opt/conda/lib/python3.10/site-packages (from seaborn) (1.26.4)\nRequirement already satisfied: pandas>=0.25 in /opt/conda/lib/python3.10/site-packages (from seaborn) (2.2.2)\nRequirement already satisfied: matplotlib!=3.6.1,>=3.1 in /opt/conda/lib/python3.10/site-packages (from seaborn) (3.7.5)\nRequirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (1.2.0)\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (4.47.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (1.4.5)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (21.3)\nRequirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (9.5.0)\nRequirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (3.1.1)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas>=0.25->seaborn) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas>=0.25->seaborn) (2023.4)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.1->seaborn) (1.16.0)\n","output_type":"stream"}]},{"cell_type":"code","source":"import json\nimport pandas as pd\nimport nltk\nimport lftk\nfrom lftk import lftk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.probability import FreqDist\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nimport spacy\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\nimport transformers\nfrom transformers import pipeline\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\n# Download necessary NLTK data\nnltk.download('punkt')\nnltk.download('stopwords')\nnltk.download('vader_lexicon')\n\n# Initialize SpaCy and VADER sentiment analyzer\nnlp = spacy.load(\"en_core_web_lg\")\nsia = SentimentIntensityAnalyzer()\n\n# Dataset with subjectivity annotations\nsubj_df = pd.read_json('/kaggle/input/raw-subj/SUBJ.json')\n\n\n# Create numeric mappings to the labels\nlabel_mapping = {'subjective': 1,\n                'objective': 0}\n\n# Apply the mappings\nsubj_df['label'] = subj_df['label'].map(label_mapping)\n\nsubj_df.rename(columns={'text': 'sentence'}, inplace=True)\n\n# Dataset with veridicality annotations\nbenchmark_df = pd.read_csv('/kaggle/input/annot-subj/annotated_SUBJ.csv', delimiter=';')\n\n# Keep only the veridicality annotations\nbenchmark_df = benchmark_df.drop(columns=['frame', 'polarity', 'verb'])\n\n# Add the subjectivity labels\nbenchmark_df['label'] = subj_df['label']\nbenchmark_df = benchmark_df[['sentence', 'label', 'veridicality_score']]\n\n# News sentences dataset\nnews_df = pd.read_csv('/kaggle/input/parsing/premises.csv')\n\n# Make the labels numeric\nnews_label_mapping = {'SUBJ': 1, 'OBJ': 0}\n\nnews_df['Label'] = news_df['Label'].map(news_label_mapping)\n\nnews_df = news_df.drop(columns=['Solved conflict'])\n\nnews_df.rename(columns={\"Sentence\": 'sentence', 'Label': 'label'}, inplace=True)\n\nmini_df = subj_df.tail(20)\n\nbenchmark_df.tail(100)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T23:58:16.033186Z","iopub.execute_input":"2024-08-22T23:58:16.034897Z","iopub.status.idle":"2024-08-22T23:58:43.325736Z","shell.execute_reply.started":"2024-08-22T23:58:16.034843Z","shell.execute_reply":"2024-08-22T23:58:43.324437Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/nltk/twitter/__init__.py:20: UserWarning: The twython library has not been installed. Some functionality from the twitter package will not be available.\n  warnings.warn(\"The twython library has not been installed. \"\n2024-08-22 23:58:23.790371: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-08-22 23:58:23.790519: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-08-22 23:58:23.952138: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"},{"name":"stdout","text":"[nltk_data] Downloading package punkt to /usr/share/nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n[nltk_data] Downloading package vader_lexicon to\n[nltk_data]     /usr/share/nltk_data...\n[nltk_data]   Package vader_lexicon is already up-to-date!\n","output_type":"stream"},{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"                                               sentence  label  \\\n9900  kimberly corman and her friends decide to head...      0   \n9901  a stunning and informative nonfiction drama th...      1   \n9902  the kids go through many adventures as a resul...      0   \n9903  a diverting detour into the gonzo outlook of a...      1   \n9904  ' brass tacks ' is a 35 mm feature length , na...      0   \n...                                                 ...    ...   \n9995  unspools like a highbrow , low key , 102 minut...      1   \n9996  using his powers of persuasion , bret pits tea...      0   \n9997  a time machine , a journey back to your childh...      1   \n9998  yet , just beneath the surface , there is an i...      0   \n9999  schnitzler does a fine job contrasting the sle...      1   \n\n      veridicality_score  \n9900            0.690687  \n9901                 NaN  \n9902                 NaN  \n9903                 NaN  \n9904                 NaN  \n...                  ...  \n9995                 NaN  \n9996                 NaN  \n9997                 NaN  \n9998                 NaN  \n9999                 NaN  \n\n[100 rows x 3 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sentence</th>\n      <th>label</th>\n      <th>veridicality_score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9900</th>\n      <td>kimberly corman and her friends decide to head...</td>\n      <td>0</td>\n      <td>0.690687</td>\n    </tr>\n    <tr>\n      <th>9901</th>\n      <td>a stunning and informative nonfiction drama th...</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9902</th>\n      <td>the kids go through many adventures as a resul...</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9903</th>\n      <td>a diverting detour into the gonzo outlook of a...</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9904</th>\n      <td>' brass tacks ' is a 35 mm feature length , na...</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9995</th>\n      <td>unspools like a highbrow , low key , 102 minut...</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9996</th>\n      <td>using his powers of persuasion , bret pits tea...</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9997</th>\n      <td>a time machine , a journey back to your childh...</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9998</th>\n      <td>yet , just beneath the surface , there is an i...</td>\n      <td>0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9999</th>\n      <td>schnitzler does a fine job contrasting the sle...</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows × 3 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Function to parse each line and convert it to a dictionary\ndef parse_line(line):\n    parts = line.split()\n    data = {}\n    for part in parts:\n        if '=' in part:\n            key, value = part.split('=')\n            data[key] = value\n    return data\n\n# Read the text file and parse each line\ndata = []\nwith open('/kaggle/input/subjective-lexicon/subj_lexicon.txt', 'r') as file:\n    for line in file:\n        parsed_line = parse_line(line.strip())\n        if parsed_line:  # Only append non-empty dictionaries\n            data.append(parsed_line)\n\n# Create a DataFrame from the list of dictionaries\nsubj_lex = pd.DataFrame(data)\nsubj_lex = subj_lex.drop(columns=['polarity', 'mpqapolarity'])\n\n# Display the DataFrame\nsubj_lex.tail(100)\n\n# subj_lex.to_csv('subj_lex.csv')\n\n# Load the NRC lexicon for emotions\nnrc_lex = pd.read_csv('/kaggle/input/bing-nrc-afinn-lexicons/NRC.csv')\n\nveridicality_df = pd.read_csv('/kaggle/input/parsing/veridicality.csv', delimiter=',')\n\nprint(veridicality_df['frame'].unique())\n\n# Function to extract the single value from a dictionary, used for lftk values\ndef extract_single_value(dictionary):\n    if isinstance(dictionary, dict):\n        return next(iter(dictionary.values()))\n    return dictionary\n\nsubj_lex.head()\nnrc_lex.tail(100)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T23:59:05.185328Z","iopub.execute_input":"2024-08-22T23:59:05.185754Z","iopub.status.idle":"2024-08-22T23:59:05.298850Z","shell.execute_reply.started":"2024-08-22T23:59:05.185720Z","shell.execute_reply":"2024-08-22T23:59:05.297580Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"['NP was Ved to VP' 'NP was Ved that S' 'NP V that S' 'NP V to VP'\n 'NP V for NP to VP' 'NP V NP to VP']\n","output_type":"stream"},{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"            word     sentiment\n13801  worthless      negative\n13802  worthless       sadness\n13803     worthy      positive\n13804     worthy         trust\n13805        wot      positive\n...          ...           ...\n13896       zest  anticipation\n13897       zest           joy\n13898       zest      positive\n13899       zest         trust\n13900        zip      negative\n\n[100 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>word</th>\n      <th>sentiment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>13801</th>\n      <td>worthless</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>13802</th>\n      <td>worthless</td>\n      <td>sadness</td>\n    </tr>\n    <tr>\n      <th>13803</th>\n      <td>worthy</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>13804</th>\n      <td>worthy</td>\n      <td>trust</td>\n    </tr>\n    <tr>\n      <th>13805</th>\n      <td>wot</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>13896</th>\n      <td>zest</td>\n      <td>anticipation</td>\n    </tr>\n    <tr>\n      <th>13897</th>\n      <td>zest</td>\n      <td>joy</td>\n    </tr>\n    <tr>\n      <th>13898</th>\n      <td>zest</td>\n      <td>positive</td>\n    </tr>\n    <tr>\n      <th>13899</th>\n      <td>zest</td>\n      <td>trust</td>\n    </tr>\n    <tr>\n      <th>13900</th>\n      <td>zip</td>\n      <td>negative</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows × 2 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Data presenatation\ncounts = news_df['label'].value_counts()\ncounts.plot(kind='bar', color=['blue', 'red'])\nplt.xlabel('label')\nplt.ylabel('Count')\nplt.title('Plotting of classes in NewsSD-EN')\nplt.xticks(rotation=0)\nplt.savefig('dataset_counts_news.png')\nplt.show() #check the weight of each class","metadata":{"execution":{"iopub.status.busy":"2024-08-22T23:59:07.962442Z","iopub.execute_input":"2024-08-22T23:59:07.962842Z","iopub.status.idle":"2024-08-22T23:59:08.321491Z","shell.execute_reply.started":"2024-08-22T23:59:07.962813Z","shell.execute_reply":"2024-08-22T23:59:08.320205Z"},"trusted":true},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## Features","metadata":{}},{"cell_type":"markdown","source":"### Lexical-semantic features","metadata":{}},{"cell_type":"code","source":"# # Load the words from the subjectivity lexicon for the polarity\n# # Divide in strong and weak polarity\n# strong_subj = subj_lex[subj_lex['type'] == 'strongsubj']['word1'].tolist()\n# weak_subj = subj_lex[subj_lex['type'] == 'weaksubj']['word1'].tolist()\n\n# # List of intensifiers, hedges, emotive verbs and pronouns\n# intensifiers = {\"absolutely\", \"completely\", \"totally\", \"extremely\", \"incredibly\", \"really\", \"very\", \n#                 \"utterly\", \"thoroughly\", \"remarkably\", \"exceptionally\", \"highly\", \"deeply\", \n#                 \"perfectly\", \"awfully\", \"tremendously\", \"so\", \"such\", \"amazingly\", \"entirely\"}\n\n# hedges = {\"sort of\", \"kind of\", \"maybe\", \"possibly\", \"probably\", \"somewhat\", \"slightly\", \n#           \"apparently\", \"seemingly\", \"relatively\", \"fairly\", \"rather\", \"more or less\", \n#           \"could be\", \"might\", \"would\", \"can\", \"could\"}\n\n# modals = {\"can\", \"could\", \"may\", \"might\", \"must\", \"shall\", \"should\", \"will\", \"would\"}\n\n# def extract_lexical_features(text):\n    \n#     # ApplySpaCy\n#     doc = nlp(text)\n    \n#     # Initialise LFTK\n#     LFTK = lftk.Extractor(doc)\n    \n#     # Tokenize text\n#     words = word_tokenize(text.lower())\n    \n#     # Preprocessed lists of the tokens\n#     stop_words = set(stopwords.words('english'))\n#     words_filtered = [w for w in words if w.isalpha() and w not in stop_words]\n#     total_words = len(words_filtered)\n    \n#     # Lemmatize words for comparison with lexicon\n#     lemmatized_words = [token.lemma_ for token in doc if token.is_alpha and not token.is_stop]\n    \n#     # Zipf's list for word frequency\n#     total_subtlex_us_zipf_of_words = extract_single_value(LFTK.extract(features = [\"t_subtlex_us_zipf\"]))\n#     # Average per word\n#     average_subtlex_us_zipf_of_words_per_word = extract_single_value(LFTK.extract(features = ['a_subtlex_us_zipf_pw']))\n    \n#     # Named Entities\n#     total_number_of_named_entities = extract_single_value(LFTK.extract(features = ['t_n_ent']))\n#     average_number_of_named_entities_per_word = extract_single_value(LFTK.extract(features = ['a_n_ent_pw']))\n#     total_number_of_named_entities_person = extract_single_value(LFTK.extract(features = ['t_n_ent_person']))\n#     average_number_of_named_entities_person_per_word = extract_single_value(LFTK.extract(features = ['a_n_ent_person_pw']))\n    \n# #     # Subjectivity Clues (using VADER lexicon)\n# #     subjectivity_clues = [word for word in words_filtered if word in sia.lexicon]\n# #     num_subjectivity_clues = len(subjectivity_clues)\n# #     ratio_subjectivity_clues = num_subjectivity_clues / len(words_filtered) if words_filtered else 0\n\n    \n#     # Subjectivity Clues (using subjective lexicon)\n#     strong_subjectivity_clues = [word for word in lemmatized_words if word in strong_subj]\n#     weak_subjectivity_clues = [word for word in lemmatized_words if word in weak_subj]\n#     num_strong_subjectivity_clues = len(strong_subjectivity_clues)\n#     num_weak_subjectivity_clues = len(weak_subjectivity_clues)\n#     ratio_strong_subjectivity_clues = num_strong_subjectivity_clues / len(words_filtered) if words_filtered else 0\n#     ratio_weak_subjectivity_clues = num_weak_subjectivity_clues / len(words_filtered) if words_filtered else 0\n    \n    \n#     # Lexical Diversity (Type-Token Ratio)\n#     simple_type_token_ratio = extract_single_value(LFTK.extract(features = [\"simp_ttr\"]))\n#     simple_type_token_ratio_no_lemma = extract_single_value(LFTK.extract(features = [\"simp_ttr_no_lem\"]))\n    \n#     # Intensifiers and Hedges\n#     num_intensifiers = sum(1 for word in words_filtered if word in intensifiers)\n#     num_hedges = sum(1 for word in words_filtered if word in hedges)\n    \n#     ratio_intensifiers = num_intensifiers / total_words if total_words else 0\n#     ratio_hedges = num_hedges / total_words if total_words else 0\n    \n\n# #     # Modals\n# #     num_modals = sum(1 for word in words if word in modals)\n# #     ratio_modals = num_modals / total_words if total_words else 0    \n      \n    \n#     # POS Variations\n#     simple_adjectives_variation = extract_single_value(LFTK.extract(features = [\"simp_adj_var\"]))\n#     simple_adpositions_variation = extract_single_value(LFTK.extract(features = [\"simp_adp_var\"]))\n#     simple_adverbs_variation = extract_single_value(LFTK.extract(features = [\"simp_adv_var\"]))\n#     simple_auxiliary_variation = extract_single_value(LFTK.extract(features = [\"simp_aux_var\"]))\n#     simple_coordinating_conjunctions_variation = extract_single_value(LFTK.extract(features = [\"simp_cconj_var\"]))\n#     simple_determiners_variation = extract_single_value(LFTK.extract(features = [\"simp_det_var\"]))\n#     simple_interjections_variation = extract_single_value(LFTK.extract(features = [\"simp_intj_var\"]))\n#     simple_nouns_variation = extract_single_value(LFTK.extract(features = [\"simp_noun_var\"]))    \n#     simple_numerals_variation = extract_single_value(LFTK.extract(features = [\"simp_num_var\"]))\n#     simple_particles_variation = extract_single_value(LFTK.extract(features = [\"simp_part_var\"]))\n#     simple_pronouns_variation = extract_single_value(LFTK.extract(features = [\"simp_pron_var\"]))\n#     simple_proper_nouns_variation = extract_single_value(LFTK.extract(features = [\"simp_propn_var\"]))\n#     simple_punctuations_variation = extract_single_value(LFTK.extract(features = [\"simp_punct_var\"]))\n#     simple_subordinating_conjunctions_variation = extract_single_value(LFTK.extract(features = [\"simp_sconj_var\"]))\n#     simple_verbs_variation = extract_single_value(LFTK.extract(features = [\"simp_verb_var\"]))\n\n\n#     features = {\n#         'total_subtlex_us_zipf_of_words': total_subtlex_us_zipf_of_words,\n#         'average_subtlex_us_zipf_of_words_per_word': average_subtlex_us_zipf_of_words_per_word,\n#         'total_number_of_named_entities': total_number_of_named_entities,\n#         'average_number_of_named_entities_per_word': average_number_of_named_entities_per_word,\n#         'total_number_of_named_entities_person': total_number_of_named_entities_person,\n#         'average_number_of_named_entities_person_per_word': average_number_of_named_entities_person_per_word,\n#         'num_strong_subjectivity_clues': num_strong_subjectivity_clues,\n#         'ratio_strong_subjectivity_clues': ratio_strong_subjectivity_clues,\n#         'num_weak_subjectivity_clues': num_weak_subjectivity_clues,\n#         'ratio_weak_subjectivity_clues': ratio_weak_subjectivity_clues,\n#         'simple_type_token_ratio': simple_type_token_ratio,\n#         'simple_type_token_ratio_no_lemma': simple_type_token_ratio_no_lemma,\n#         'num_intensifiers': num_intensifiers,\n#         'ratio_intensifiers': ratio_intensifiers,\n#         'num_hedges': num_hedges,\n#         'ratio_hedges': ratio_hedges,\n# #         'num_modals': num_modals,\n# #         'ratio_modals': ratio_modals,\n#         'simple_adjectives_variation': simple_adjectives_variation,\n#         'simple_adpositions_variation': simple_adpositions_variation,\n#         'simple_adverbs_variation': simple_adverbs_variation,\n#         'simple_auxiliary_variation': simple_auxiliary_variation,\n#         'simple_coordinating_conjunctions_variation': simple_coordinating_conjunctions_variation,\n#         'simple_determiners_variation': simple_determiners_variation,\n#         'simple_interjections_variation': simple_interjections_variation,\n#         'simple_nouns_variation': simple_nouns_variation,\n#         'simple_numerals_variation': simple_numerals_variation,\n#         'simple_particles_variation': simple_particles_variation,\n#         'simple_pronouns_variation': simple_pronouns_variation,\n#         'simple_proper_nouns_variation': simple_proper_nouns_variation,\n#         'simple_punctuations_variation': simple_punctuations_variation,\n#         'simple_subordinating_conjunctions_variation': simple_subordinating_conjunctions_variation,\n#         'simple_verbs_variation': simple_verbs_variation\n\n#     }\n#     return features\n# lexical_features_list = []\n\n# total_data_points = len(news_df)\n# progress_interval = 250\n\n# # # Apply the function to the MINI dataframe\n# # for index, row in mini_df.iterrows():\n# #     text = row['sentence']\n# #     lexical_features = extract_lexical_features(text)\n# #     lexical_features_list.append(lexical_features)\n\n# # Apply the function to each row in the news dataframe\n# for index, row in news_df.iterrows():\n#     text = row['sentence']\n#     lexical_features = extract_lexical_features(text)\n#     lexical_features_list.append(lexical_features)\n    \n# # # Apply the function to each row in the subj dataframe\n# # for index, row in subj_df.iterrows():\n# #     text = row['sentence']\n# #     lexical_features = extract_lexical_features(text)\n# #     lexical_features_list.append(lexical_features)\n\n#     if (index + 1) % progress_interval == 0:\n#         print(f\"Processing data point {index + 1} of {total_data_points}\")\n        \n# # Create DataFrame for lexical features\n# lexical_df = pd.DataFrame(lexical_features_list)\n\n# lexical_df.to_csv('lexical_features_news.csv', index=False)\n\n# lexical_df.tail(100)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T20:47:40.214017Z","iopub.execute_input":"2024-08-22T20:47:40.214382Z","iopub.status.idle":"2024-08-22T20:47:40.228668Z","shell.execute_reply.started":"2024-08-22T20:47:40.214352Z","shell.execute_reply":"2024-08-22T20:47:40.227266Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":"### Structural Features","metadata":{}},{"cell_type":"code","source":"# # Discourse Connectives\n# discourse_connectives = {\n#     'contrastive': [\"although\", \"but\", \"by contrast\", \"even though\", \"however\", \"nevertheless\", \"nonetheless\", \"on the other hand\", \"still\", \"yet\"],\n#     'causal': [\"as a result\", \"because\", \"since\", \"so that\", \"therefore\", \"thus\"],\n#     'additive': [\"also\", \"in addition\", \"moreover\", \"indeed\", \"furthermore\"],\n#     'temporal': [\"after\", \"as soon as\", \"before\", \"finally\", \"later\", \"meanwhile\", \"once\", \"previously\", \"until\", \"when\", \"while\"],\n#     'conditional': [\"even if\", \"if\", \"now that\", \"unless\"],\n#     'exemplification': [\"for example\", \"for instance\", \"in fact\", \"in turn\"],\n#     'clarification': [\"as if\", \"in fact\"],\n#     'adversative': [\"instead\", \"otherwise\", \"though\"]\n# }\n\n# # Function to count discourse connectives per category in a single sentence\n# def count_connective_categories(text):\n#     words = word_tokenize(text.lower())\n#     total_words = len(words)\n    \n#     connective_counts = {category: 0 for category in discourse_connectives}\n    \n#     for i in range(total_words):\n#         for category, connectives in discourse_connectives.items():\n#             for connective in connectives:\n#                 connective_words = word_tokenize(connective)\n#                 connective_length = len(connective_words)\n                \n#                 if words[i:i+connective_length] == connective_words:\n#                     connective_counts[category] += 1\n    \n#     return connective_counts\n\n# def extract_structural_features(text):\n#     # Apply SpaCy\n#     doc = nlp(text)\n    \n#     # Initialise LFTK\n#     LFTK = lftk.Extractor(doc)\n    \n#     # Tokenize text\n#     words = word_tokenize(text.lower())\n    \n#     # Preprocessed lists of the tokens\n#     stop_words = set(stopwords.words('english'))\n#     words_filtered = [w for w in words if w.isalpha() and w not in stop_words]\n#     total_words = len(words_filtered)\n    \n#     # Word Frequency\n#     total_number_of_words = extract_single_value(LFTK.extract(features = [\"t_word\"]))\n#     total_number_of_stop_words = extract_single_value(LFTK.extract(features = [\"t_stopword\"]))\n#     total_number_of_puntuations = extract_single_value(LFTK.extract(features = [\"t_punct\"]))\n#     total_number_of_syllables = extract_single_value(LFTK.extract(features = [\"t_syll\"]))\n#     total_number_of_words_more_than_two_syllables = extract_single_value(LFTK.extract(features = [\"t_syll2\"]))\n#     total_number_of_words_more_than_three_syllables = extract_single_value(LFTK.extract(features = [\"t_syll3\"]))\n#     total_number_of_unique_words = extract_single_value(LFTK.extract(features = [\"t_uword\"]))\n        \n#     # Question Marks\n#     num_question_marks = text.count('?')\n#     ratio_question_marks = num_question_marks / total_words if total_words else 0\n    \n#     # Exclamation Marks\n#     num_exclamations = text.count('!')\n#     ratio_exclamations = num_exclamations / total_words if total_words else 0 \n    \n#     # Discourse connective categories counts\n#     connective_counts = count_connective_categories(text)\n    \n#     features = {\n#         'total_number_of_words': total_number_of_words,\n#         'total_number_of_stop_words': total_number_of_stop_words,\n#         'total_number_of_punctuations': total_number_of_puntuations,\n#         'total_number_of_syllables': total_number_of_syllables,\n#         'total_number_of_words_more_than_two_syllables': total_number_of_words_more_than_two_syllables,\n#         'total_number_of_words_more_than_three_syllables': total_number_of_words_more_than_three_syllables,\n#         'total_number_of_unique_words': total_number_of_unique_words,\n#         'num_exclamations': num_exclamations, \n#         'ratio_exclamations': ratio_exclamations,\n#         'num_question_marks': num_question_marks,\n#         'ratio_question_marks': ratio_question_marks,\n#         'sentence_length': total_words\n#     }\n    \n#     # Add connective counts to features\n#     features.update(connective_counts)\n    \n#     return features\n\n\n# structural_features_list = []\n\n# total_data_points = len(news_df)\n# progress_interval = 250\n\n# # for index, row in mini_df.iterrows():\n# #     text = row['sentence']\n# #     structural_features = extract_structural_features(text)\n# #     structural_features_list.append(structural_features)\n    \n# for index, row in news_df.iterrows():\n#     text = row['sentence']\n#     structural_features = extract_structural_features(text)\n#     structural_features_list.append(structural_features)\n    \n# # for index, row in subj_df.iterrows():\n# #     text = row['sentence']\n# #     structural_features = extract_structural_features(text)\n# #     structural_features_list.append(structural_features)\n    \n#     if (index + 1) % progress_interval == 0:\n#         print(f\"Processing data point {index + 1} of {total_data_points}\")\n    \n# structural_df = pd.DataFrame(structural_features_list)\n# structural_df.to_csv('structural_features_news.csv', index=False)\n# structural_df.tail(100)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-22T20:47:40.230634Z","iopub.execute_input":"2024-08-22T20:47:40.231056Z","iopub.status.idle":"2024-08-22T20:47:40.252134Z","shell.execute_reply.started":"2024-08-22T20:47:40.231022Z","shell.execute_reply":"2024-08-22T20:47:40.250905Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":"### Perspective Features","metadata":{}},{"cell_type":"code","source":"# # Pronoun sets\n# first_person_pronouns = {\"i\", \"me\", \"my\", \"mine\", \"myself\", \"we\", \"us\", \"our\"}\n# second_person_pronouns = {\"you\", \"your\", \"yours\", \"yourself\", \"yourselves\"}\n# third_person_pronouns = {\"he\", \"him\", \"his\", \"she\", \"her\", \"they\", \"them\", \"their\", \"theirs\", \"himself\", \"herself\", \"itself\", \"themselves\"}\n# possessive_pronouns = {\"my\", \"mine\", \"your\", \"yours\", \"his\", \"hers\", \"its\", \"our\", \"ours\", \"their\", \"theirs\"}\n# demonstrative_pronouns = {\"this\", \"that\", \"these\", \"those\"}\n# reflexive_pronouns = {\"myself\", \"yourself\", \"himself\", \"herself\", \"itself\", \"ourselves\", \"yourselves\", \"themselves\"}\n\n# # Exclude pronouns from stopwords for faster processing\n# all_pronouns = first_person_pronouns.union(second_person_pronouns).union(third_person_pronouns).union(possessive_pronouns).union(demonstrative_pronouns).union(reflexive_pronouns)\n\n\n# def extract_perspective(text):\n#     # Tokenize text\n#     words = word_tokenize(text.lower())\n    \n#     # Preprocessed lists of the tokens\n#     stop_words = set(stopwords.words('english'))\n#     stop_words.difference_update(all_pronouns)\n#     words_filtered = [w for w in words if w.isalpha() and w not in stop_words]\n#     total_words = len(words_filtered)\n    \n#     # First-Person Pronouns\n#     num_first_person_pronouns = sum(1 for word in words if word in first_person_pronouns)\n#     ratio_first_person_pronouns = num_first_person_pronouns / total_words if total_words else 0\n    \n#     # Second-Person Pronouns\n#     num_second_person_pronouns = sum(1 for word in words if word in second_person_pronouns)\n#     ratio_second_person_pronouns = num_second_person_pronouns / total_words if total_words else 0\n    \n#     # Third-Person Pronouns\n#     num_third_person_pronouns = sum(1 for word in words if word in third_person_pronouns)\n#     ratio_third_person_pronouns = num_third_person_pronouns / total_words if total_words else 0\n    \n#     # Possessive Pronouns\n#     num_possessive_pronouns = sum(1 for word in words if word in possessive_pronouns)\n#     ratio_possessive_pronouns = num_possessive_pronouns / total_words if total_words else 0\n    \n#     # Demonstrative Pronouns\n#     num_demonstrative_pronouns = sum(1 for word in words if word in demonstrative_pronouns)\n#     ratio_demonstrative_pronouns = num_demonstrative_pronouns / total_words if total_words else 0\n    \n#     # Reflexive Pronouns\n#     num_reflexive_pronouns = sum(1 for word in words if word in reflexive_pronouns)\n#     ratio_reflexive_pronouns = num_reflexive_pronouns / total_words if total_words else 0\n    \n#     # Personal Pronoun Density\n#     num_personal_pronouns = (num_first_person_pronouns + num_second_person_pronouns + num_third_person_pronouns)\n#     ratio_personal_pronouns = num_personal_pronouns / total_words if total_words else 0\n    \n#     features = {\n#         'num_first_person_pronouns': num_first_person_pronouns,\n#         'ratio_first_person_pronouns': ratio_first_person_pronouns,\n#         'num_second_person_pronouns': num_second_person_pronouns,\n#         'ratio_second_person_pronouns': ratio_second_person_pronouns,\n#         'num_third_person_pronouns': num_third_person_pronouns,\n#         'ratio_third_person_pronouns': ratio_third_person_pronouns,\n#         'num_possessive_pronouns': num_possessive_pronouns,\n#         'ratio_possessive_pronouns': ratio_possessive_pronouns,\n#         'num_demonstrative_pronouns': num_demonstrative_pronouns,\n#         'ratio_demonstrative_pronouns': ratio_demonstrative_pronouns,\n#         'num_reflexive_pronouns': num_reflexive_pronouns,\n#         'ratio_reflexive_pronouns': ratio_reflexive_pronouns,\n#         'num_personal_pronouns': num_personal_pronouns,\n#         'ratio_personal_pronouns': ratio_personal_pronouns\n#     }\n    \n#     return features\n\n# perspective_features_list = []\n\n# total_data_points = len(news_df)\n# progress_interval = 250\n\n# # Apply to all sentences in the news dataset\n# for index, row in news_df.iterrows():\n#     text = row['sentence']\n#     perspective_features = extract_perspective(text)\n#     perspective_features_list.append(perspective_features)\n    \n# # # Apply to all sentences in the subj dataset\n# # for index, row in subj_df.iterrows():\n# #     text = row['sentence']\n# #     perspective_features = extract_perspective(text)\n# #     perspective_features_list.append(perspective_features)\n    \n#     if (index + 1) % progress_interval == 0:\n#         print(f\"Processing data point {index + 1} of {total_data_points}\")\n    \n# # Create DataFrame for perspective features\n# perspective_df = pd.DataFrame(perspective_features_list)\n# perspective_df.to_csv('perspective_features_news.csv', index=False)\n# perspective_df.tail(100)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T20:47:40.253894Z","iopub.execute_input":"2024-08-22T20:47:40.254323Z","iopub.status.idle":"2024-08-22T20:47:40.273402Z","shell.execute_reply.started":"2024-08-22T20:47:40.254270Z","shell.execute_reply":"2024-08-22T20:47:40.272130Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":"### Affect Features","metadata":{}},{"cell_type":"code","source":"# # Initialize transformers pipelines for sentiment and emotion\n# emo_classifier = pipeline(task=\"text-classification\", model=\"SamLowe/roberta-base-go_emotions\", top_k=None)\n\n# # Load the words from the subjectivity lexicon for the polarity\n# positive_words = subj_lex[subj_lex['priorpolarity'] == 'positive']['word1'].tolist()\n# negative_words = subj_lex[subj_lex['priorpolarity'] == 'negative']['word1'].tolist()\n\n# # Load the NRC lexicon to focus on the verbs for emotions\n# nrc_lex = pd.read_csv('/kaggle/input/bing-nrc-afinn-lexicons/NRC.csv')\n\n# # Extract verbs, nouns, adjectives and adverbs from NRC Emotion Lexicon using SpaCy\n# doc = nlp(\" \".join(nrc_lex['word'].unique()))\n\n# emotive_verbs = {token.lemma_.lower() for token in doc if token.pos_ == \"VERB\"}\n# emotive_verbs = set(emotive_verbs)\n\n# emotive_nouns = {token.lemma_.lower() for token in doc if token.pos_ == \"NOUN\"}\n# emotive_nouns = set(emotive_nouns)\n\n# emotive_adjectives = {token.lemma_.lower() for token in doc if token.pos_ == \"ADJ\"}\n# emotive_adjectives = set(emotive_adjectives)\n\n# emotive_adverbs = {token.lemma_.lower() for token in doc if token.pos_ == \"ADV\"}\n# emotive_adverbs = set(emotive_adverbs)\n\n\n# # Emotive factives without 'be' verb for flexibility\n# emotive_factives = [\n#     ('sorry', 'ADJ'), ('regret', 'VERB'), ('resent', 'VERB'), ('lament', 'VERB'), \n#     ('disappointed', 'ADJ'), ('appalled', 'ADJ'), ('sad', 'ADJ'), ('angry', 'ADJ'), \n#     ('pained', 'ADJ'), ('shocked', 'ADJ'), ('indignant', 'ADJ'), ('disgusted', 'ADJ'), \n#     ('horrified', 'ADJ'), ('bewail', 'VERB'), ('deplore', 'VERB'), ('rue', 'VERB'), \n#     ('ashamed', 'ADJ'), ('upset', 'ADJ'), ('mad', 'ADJ'), ('pissed', 'ADJ'), \n#     ('insulted', 'ADJ'), ('furious', 'ADJ'), ('pleased', 'ADJ'), ('happy', 'ADJ'), \n#     ('proud', 'ADJ'), ('thrilled', 'ADJ'), ('overjoyed', 'ADJ'), ('grateful', 'ADJ'), \n#     ('thank', 'VERB'), ('thank', 'VERB', 'God'), ('thank', 'VERB', 'heavens'), ('thank', 'VERB', 'one’s lucky stars'),\n#     ('honoured', 'ADJ'), ('moved', 'ADJ'), ('satisfied', 'ADJ'), ('delighted', 'ADJ'), \n#     ('elated', 'ADJ'), ('thankful', 'ADJ'), ('tickled pink', 'ADJ'), \n#     ('exhilarated', 'ADJ'), ('ecstatic', 'ADJ'), ('glad', 'ADJ'), ('gratified', 'ADJ'), \n#     ('euphoric', 'ADJ'), ('jubilant', 'ADJ'), ('surprised', 'ADJ'), ('amazed', 'ADJ'), \n#     ('taken aback', 'ADJ'), ('baffled', 'ADJ'), ('puzzled', 'ADJ'), ('nonplussed', 'ADJ'), \n#     ('perplexed', 'ADJ'), ('astonished', 'ADJ')\n# ]\n# # Patrick Duffley and Pierre Larrivée (2019)\n\n# def fetch_emotive_factives(text):\n#     doc = nlp(text.lower())\n    \n#     # Create a list of lemmatized tokens, including POS tags\n#     lemmatized_tokens = [(token.lemma_, token.pos_) for token in doc]\n    \n#     emotive_factive_count = 0\n    \n#     # Iterate through lemmatized tokens and check for emotive keywords\n#     i = 0\n#     while i < len(lemmatized_tokens):\n#         for factive in emotive_factives:\n#             if len(factive) == 2:\n#                 factive_lemma, factive_pos = factive\n#                 if i < len(lemmatized_tokens) and lemmatized_tokens[i] == (factive_lemma, factive_pos):\n#                     emotive_factive_count += 1\n#                     i += 1\n#                     break\n#             elif len(factive) == 3:\n#                 factive_lemma1, factive_pos1, factive_lemma2 = factive\n#                 if (i + 1 < len(lemmatized_tokens) and \n#                     lemmatized_tokens[i] == (factive_lemma1, factive_pos1) and\n#                     lemmatized_tokens[i + 1][0] == factive_lemma2):\n#                     emotive_factive_count += 1\n#                     i += 2\n#                     break\n#         else:\n#             i += 1\n    \n#     return emotive_factive_count\n\n# def extract_affect(text):\n    \n#     doc = nlp(text)\n    \n#     # Tokenize text\n#     words = word_tokenize(text.lower())\n    \n#     # Preprocessed lists of the tokens\n#     stop_words = set(stopwords.words('english'))\n#     words_filtered = [w for w in words if w.isalpha() and w not in stop_words]\n#     total_words = len(words_filtered)\n    \n#     # Lemmatize words for comparison with lexicon\n#     lemmatized_words = [token.lemma_ for token in doc if token.is_alpha]\n    \n#     # Extract sentiments\n#     sentiment_scores = sia.polarity_scores(text)\n    \n#     # Total sentiment of the sentence\n#     compound_sentiment_score = sentiment_scores['compound']\n    \n#     # Extract emotions with RoBerta model\n#     emotions = emo_classifier(text)\n#     emotion_scores = {emotion['label']: emotion['score'] for emotion in emotions[0]}\n#     emotions_no_neutral = {emotion['label']: emotion['score'] for emotion in emotions[0] if emotion['label'] != 'neutral'}\n#     mean_emotion_score = np.mean(list(emotions_no_neutral.values()))\n    \n\n#     # Emotive Verbs, Nouns, Adjectives and Adverbs\n#     num_emotive_verbs = sum(1 for word in lemmatized_words if word in emotive_verbs) #lemmatized to match\n#     ratio_emotive_verbs = num_emotive_verbs / total_words if total_words else 0\n    \n#     num_emotive_nouns = sum(1 for word in words_filtered if word in emotive_nouns)\n#     ratio_emotive_nouns = num_emotive_nouns / total_words if total_words else 0\n    \n#     num_emotive_adjectives = sum(1 for word in words_filtered if word in emotive_adjectives)\n#     ratio_emotive_adjectives = num_emotive_adjectives / total_words if total_words else 0\n    \n#     num_emotive_adverbs = sum(1 for word in words_filtered if word in emotive_adverbs)\n#     ratio_emotive_adverbs = num_emotive_adverbs / total_words if total_words else 0\n    \n    \n#     # Emotive-factives\n#     num_emotive_factive_verbs = fetch_emotive_factives(text)\n#     ratio_emotive_factive_verbs = num_emotive_factive_verbs / total_words if total_words else 0\n    \n    \n#     # Positive and negative subjective terms\n#     num_positive_terms = sum(1 for word in lemmatized_words if word in positive_words)\n#     num_negative_terms = sum(1 for word in lemmatized_words if word in negative_words)\n#     ratio_positive_terms = num_positive_terms / total_words if total_words else 0\n#     ratio_negative_terms = num_negative_terms / total_words if total_words else 0\n\n#     # Positive and negative subjective adjectives\n#     num_positive_adjectives = sum(1 for token in doc if token.pos_ == 'ADJ' and token.lemma_ in positive_words)\n#     num_negative_adjectives = sum(1 for token in doc if token.pos_ == 'ADJ' and token.lemma_ in negative_words)\n#     ratio_positive_adjectives = num_positive_adjectives / total_words if total_words else 0\n#     ratio_negative_adjectives = num_negative_adjectives / total_words if total_words else 0\n    \n#     # Positive and negative subjective adverbs\n#     num_positive_adverbs = sum(1 for token in doc if token.pos_ == 'ADV' and token.lemma_ in positive_words)\n#     num_negative_adverbs = sum(1 for token in doc if token.pos_ == 'ADV' and token.lemma_ in negative_words)\n#     ratio_positive_adverbs = num_positive_adverbs / total_words if total_words else 0\n#     ratio_negative_adverbs = num_negative_adverbs / total_words if total_words else 0\n\n#     # Positive and negative subjective verbs\n#     num_positive_verbs = sum(1 for token in doc if token.pos_ == 'VERB' and token.lemma_ in positive_words)\n#     num_negative_verbs = sum(1 for token in doc if token.pos_ == 'VERB' and token.lemma_ in negative_words)\n#     ratio_positive_verbs = num_positive_verbs / total_words if total_words else 0\n#     ratio_negative_verbs = num_negative_verbs / total_words if total_words else 0\n\n#     # Positive and negative subjective nouns\n#     num_positive_nouns = sum(1 for token in doc if token.pos_ == 'NOUN' and token.lemma_ in positive_words)\n#     num_negative_nouns = sum(1 for token in doc if token.pos_ == 'NOUN' and token.lemma_ in negative_words)\n#     ratio_positive_nouns = num_positive_nouns / total_words if total_words else 0\n#     ratio_negative_nouns = num_negative_nouns / total_words if total_words else 0\n    \n        \n#     features = {\n#         'emotion_scores': emotion_scores,\n#         'mean_emotion_score': mean_emotion_score,\n#         'sentiment_scores': sentiment_scores,\n#         'compound_sentiment_score': compound_sentiment_score,\n#         'num_positive_terms': num_positive_terms,\n#         'ratio_positive_terms': ratio_positive_terms,\n#         'num_negative_terms': num_negative_terms,\n#         'ratio_negative_terms': ratio_negative_terms,        \n#         'num_emotive_verbs': num_emotive_verbs,\n#         'ratio_emotive_verbs': ratio_emotive_verbs,\n#         'num_emotive_nouns': num_emotive_nouns,\n#         'ratio_emotive_nouns': ratio_emotive_nouns,\n#         'num_emotive_adjectives': num_emotive_adjectives,\n#         'ratio_emotive_adjectives': ratio_emotive_adjectives,\n#         'num_emotive_adverbs': num_emotive_adverbs,\n#         'ratio_emotive_adverbs': ratio_emotive_adverbs,\n#         'num_emotive_factive_verbs': num_emotive_factive_verbs,\n#         'ratio_emotive_factive_verbs': ratio_emotive_factive_verbs,\n#         'num_positive_adjectives': num_positive_adjectives,\n#         'ratio_positive_adjectives': ratio_positive_adjectives,\n#         'num_negative_adjectives': num_negative_adjectives,\n#         'ratio_negative_adjectives': ratio_negative_adjectives,\n#         'num_positive_adverbs': num_positive_adverbs,\n#         'ratio_positive_adverbs': ratio_positive_adverbs,\n#         'num_negative_adverbs': num_negative_adverbs,\n#         'ratio_negative_adverbs': ratio_negative_adverbs,\n#         'num_positive_verbs': num_positive_verbs,\n#         'ratio_positive_verbs': ratio_positive_verbs,\n#         'num_negative_verbs': num_negative_verbs,\n#         'ratio_negative_verbs': ratio_negative_verbs,\n#         'num_positive_nouns': num_positive_nouns,\n#         'ratio_positive_nouns': ratio_positive_nouns,\n#         'num_negative_nouns': num_negative_nouns,\n#         'ratio_negative_nouns': ratio_negative_nouns\n#     }\n    \n#     return features\n\n\n# affect_features_list = []\n\n# total_data_points = len(news_df)\n# progress_interval = 250  # Interval to print progress\n    \n# # for index, row in mini_df.iterrows():\n# #     text = row['sentence']\n# #     affect_features = extract_affect(text)\n# #     affect_features_list.append(affect_features)\n    \n# for index, row in news_df.iterrows():\n#     text = row['sentence']\n#     affect_features = extract_affect(text)\n#     affect_features_list.append(affect_features)\n    \n# # for index, row in subj_df.iterrows():\n# #     text = row['sentence']\n# #     affect_features = extract_affect(text)\n# #     affect_features_list.append(affect_features)\n    \n#     # Print the progress at intervals\n#     if (index + 1) % progress_interval == 0:\n#         print(f\"Processing data point {index + 1} of {total_data_points}\")\n        \n# affect_df = pd.DataFrame(affect_features_list)\n\n# # Extract emotions and sentiment into separate columns\n# emotion_df = affect_df['emotion_scores'].apply(pd.Series).fillna(0)\n# sentiment_df = affect_df['sentiment_scores'].apply(pd.Series).fillna(0)\n\n# # Concatenate the original dataframe with the emotion dataframe\n# affect_df = pd.concat([affect_df, emotion_df, sentiment_df], axis=1)\n# affect_df = affect_df.drop(columns=['sentiment_scores', 'emotion_scores'])\n\n# affect_df.to_csv('affect_features_news.csv', index=False)\n\n# affect_df.tail(100)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T20:47:40.275207Z","iopub.execute_input":"2024-08-22T20:47:40.275611Z","iopub.status.idle":"2024-08-22T20:47:40.301950Z","shell.execute_reply.started":"2024-08-22T20:47:40.275563Z","shell.execute_reply":"2024-08-22T20:47:40.300417Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":"### Epistemic Status Features","metadata":{}},{"cell_type":"code","source":"epistemic_verbs = {'acknowledge', 'admit', 'affirm', 'allege', 'assume', 'assert', 'claim', 'confirm', 'conjecture',\n                     'consider', 'declare', 'deny', 'disclose', 'discover', 'doubt', 'estimate', 'expect', 'find',\n                     'guess', 'hear', 'imagine', 'indicate', 'infer', 'inform', 'know', 'mention', 'note', 'observe',\n                     'perceive', 'point out', 'postulate', 'predict', 'presume', 'prove', 'realize', 'recognize',\n                     'report', 'reveal', 'rumor', 'say', 'see', 'show', 'speculate', 'state', 'suggest', 'suppose',\n                     'suspect', 'testify', 'think', 'understand'}\n\nmodals = {\"could\", \"may\", \"might\", \"must\", \"shall\", \"should\", \"will\", \"would\"}\n# epistemic_modals = {\"might\"}\n# deontic_modals = {\"shall\", \"ought\"}\n# dual_modals = {\"must\", \"may\" \"should\", \"can\", \"could\", \"will\"}\n\n# Define the frames\nframes = ['NP V that S', 'NP was Ved that S', 'NP V to VP', 'NP V NP to VP', 'NP was Ved to VP', 'NP V for NP to VP']\n\n# def is_epistemic(token):\n#     # Implement context-based rules to differentiate dual modals\n#     if any(child.dep_ == 'xcomp' and child.pos_ == 'VERB' for child in token.head.children):\n#         return True\n#     if any(child.dep_ in {'advmod', 'acomp'} for child in head.children):\n#         return True\n#     return False\n\n# def extract_modality(sentence):\n#     doc = nlp(sentence)\n#     epistemic_modals_list = []\n#     deontic_modals_list = []\n    \n#     print(\"Tokens and their dependencies:\")\n#     for token in doc:\n#         print(f\"Token: {token.text}, Lemma: {token.lemma_}, Dep: {token.dep_}, Head: {token.head.text}\")\n\n#     for token in doc:\n#         if token.lemma_ in epistemic_modals:\n#             epistemic_modals_list.append(token.text)\n#             print(f\"Epistemic modal: {token.text}\")\n#         elif token.lemma_ in deontic_modals:\n#             deontic_modals_list.append(token.text)\n#             print(f\"Deontic modal: {token.text}\")\n#         elif token.lemma_ in dual_modals:\n#             if is_epistemic(token):\n#                 epistemic_modals_list.append(token.text)\n#                 print(f\"Epistemic modal (dual): {token.text}\")\n#             else:\n#                 deontic_modals_list.append(token.text)\n#                 print(f\"Deontic modal (dual): {token.text}\")\n    \n#     return epistemic_modals_list, deontic_modals_list\n\ndef extract_frame(sentence):\n    doc = nlp(sentence)\n    frame = []\n\n    # Iterate through tokens in the sentence\n    for token in doc:\n\n        # ccomp related to the root with 'that' as a mark\n        if token.dep_ == 'ccomp' and token.head.dep_ == 'ROOT':\n            for child in token.children:\n                if child.dep_ == 'mark' and child.text == 'that':\n                    frame.append('NP V that S')\n                    break\n\n        # Check for 'NP was Ved that S' frame\n        if token.dep_ == 'ROOT':\n            if any(child.dep_ == 'ccomp' for child in token.children) and any(\n                    child.dep_ == 'nsubjpass' for child in token.children):\n                frame.append('NP was Ved that S')\n                break\n\n        if token.dep_ == 'acomp' and token.head.dep_ == 'ROOT':\n            if any(child.dep_ == 'ccomp' for child in token.children):\n                frame.append('NP was Ved that S')\n                break\n\n        # Check for 'NP V to VP' frame\n        if token.dep_ == 'xcomp' and token.head.dep_ == 'ROOT':\n            for child in token.children:\n                if child.dep_ == 'aux' and child.text == 'to':\n                    frame.append('NP V to VP')\n                    break\n\n        # Check for 'NP was Ved to VP' frame\n        # eg was thought\n        if token.dep_ == 'ROOT':\n            if any(child.dep_ == 'xcomp' for child in token.children) and any(\n                    child.dep_ == 'nsubjpass' for child in token.children):\n                frame.append('NP was Ved to VP')\n                break\n                # eg was tantalized\n        if token.dep_ == 'acomp' and token.head.dep_ == 'ROOT':\n            if any(child.dep_ == 'xcomp' for child in token.children):\n                frame.append('NP was Ved to VP')\n                break\n\n        # Check for 'NP V NP to VP' frame\n        if token.dep_ == 'advcl' and token.head.dep_ == 'ROOT':\n            for child in token.children:\n                if child.text == 'to' and child.dep_ == 'aux':\n                    frame.append('NP V NP to VP')\n                    break\n\n                    # Check for 'NP V for NP to VP' frame\n        if token.dep_ == 'prep' and token.head.dep_ == 'ROOT':\n            for child in token.children:\n                if child.dep_ == 'pobj':\n                    for grandchild in child.children:\n                        if grandchild.dep_ == 'relcl':\n                            frame.append('NP V for NP to VP')\n                            break\n\n    return frame\n\n\n# Function to identify the polarity\ndef extract_polarity(sentence):\n    doc = nlp(sentence)\n    polarity = 'positive'\n\n    # Iterate through tokens in the sentence\n    for token in doc:\n        # Look for neg in the children of the roots\n        if token.dep_ == 'neg' and token.head.dep_ == 'ROOT':\n            polarity = 'negative'\n            break\n\n    return polarity\n\n\n# Function to extract the lemma of the root of the sentence\ndef extract_verb(sentence):\n    doc = nlp(sentence)\n    verb = None\n\n    # Iterate through tokens in the sentence\n    for token in doc:\n        # look for neg in the children of the roots\n        if token.dep_ == 'ROOT':\n            verb = token.lemma_\n            break\n\n    return verb\n\n\n# Function to make matches and get the score\ndef get_veridicality_score(frame, polarity, verb, veridicality_df):\n    for _, row in veridicality_df.iterrows():\n        if verb == row['verb']:\n            if frame == [row['frame']]:\n                if polarity == row['polarity']:\n                    return row['veridicalitynorm']\n    return np.nan\n\n\n# Function that applies the rest of the functions\ndef process_sentence(sentence, veridicality_df):\n    frame = extract_frame(sentence)\n    polarity = extract_polarity(sentence)\n    verb = extract_verb(sentence)\n    veridicality_score = [get_veridicality_score(frame, polarity, verb, veridicality_df)]\n    \n    return veridicality_score\n\n\ndef extract_epistemic_status_features(text):\n        \n    doc = nlp(text)\n    \n    # Tokenize text\n    words = word_tokenize(text.lower())\n    \n    # Preprocessed lists of the tokens\n    stop_words = set(stopwords.words('english'))\n    words_filtered = [w for w in words if w.isalpha() and w not in stop_words]\n    total_words = len(words_filtered)\n    \n    # Lemmatize words for comparison with lexicon\n    lemmatized_words = [token.lemma_ for token in doc if token.is_alpha and not token.is_stop]\n    \n    # Modals\n    num_modals = sum(1 for word in words if word in modals)\n    ratio_modals = num_modals / total_words if total_words else 0   \n    \n    veridicality_score = process_sentence(text, veridicality_df)\n    \n    num_epistemic_verbs = sum(1 for word in lemmatized_words if word in epistemic_verbs) #lemmatized to match\n    ratio_epistemic_verbs = num_epistemic_verbs / total_words if total_words else 0\n    \n    features = {\n        'num_modals': num_modals,\n        'ratio_modals': ratio_modals,\n        'veridicality_score': veridicality_score,\n        'num_epistemic_verbs': num_epistemic_verbs,\n        'ratio_epistemic_verbs': ratio_epistemic_verbs}\n    \n    return features\n\n\nepistemic_status_features_list = []\n\ntotal_data_points = len(news_df)\nprogress_interval = 250\n\n# for index, row in mini_df.iterrows():\n#     text = row['sentence']\n#     epistemic_status_features = extract_epistemic_status_features(text)\n#     epistemic_status_features_list.append(epistemic_status_features)\n\nfor index, row in news_df.iterrows():\n    text = row['sentence']\n    epistemic_status_features = extract_epistemic_status_features(text)\n    epistemic_status_features_list.append(epistemic_status_features)\n    \n# for index, row in subj_df.iterrows():\n#     text = row['sentence']\n#     epistemic_status_features = extract_epistemic_status_features(text)\n#     epistemic_status_features_list.append(epistemic_status_features)\n    \n    # Print the progress at intervals\n    if (index + 1) % progress_interval == 0:\n        print(f\"Processing data point {index + 1} of {total_data_points}\")\n        \nepistemic_status_df = pd.DataFrame(epistemic_status_features_list)\n\n# epistemic_status_df['veridicality_score'] = benchmark_df['veridicality_score']\n\nepistemic_status_df.to_csv('epistemic_status_features_news.csv', index=False)\n\nepistemic_status_df.tail(100)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T23:59:22.463432Z","iopub.execute_input":"2024-08-22T23:59:22.463848Z","iopub.status.idle":"2024-08-23T00:03:47.523690Z","shell.execute_reply.started":"2024-08-22T23:59:22.463813Z","shell.execute_reply":"2024-08-23T00:03:47.522611Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Processing data point 250 of 1049\nProcessing data point 500 of 1049\nProcessing data point 750 of 1049\nProcessing data point 1000 of 1049\n","output_type":"stream"},{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"      num_modals  ratio_modals veridicality_score  num_epistemic_verbs  \\\n949            0      0.000000              [nan]                    0   \n950            1      0.090909              [nan]                    0   \n951            0      0.000000              [nan]                    0   \n952            1      0.250000              [nan]                    0   \n953            0      0.000000              [nan]                    0   \n...          ...           ...                ...                  ...   \n1044           2      0.117647              [nan]                    0   \n1045           0      0.000000              [nan]                    0   \n1046           2      0.285714              [nan]                    0   \n1047           0      0.000000              [nan]                    0   \n1048           0      0.000000              [nan]                    0   \n\n      ratio_epistemic_verbs  \n949                     0.0  \n950                     0.0  \n951                     0.0  \n952                     0.0  \n953                     0.0  \n...                     ...  \n1044                    0.0  \n1045                    0.0  \n1046                    0.0  \n1047                    0.0  \n1048                    0.0  \n\n[100 rows x 5 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>num_modals</th>\n      <th>ratio_modals</th>\n      <th>veridicality_score</th>\n      <th>num_epistemic_verbs</th>\n      <th>ratio_epistemic_verbs</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>949</th>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>[nan]</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>950</th>\n      <td>1</td>\n      <td>0.090909</td>\n      <td>[nan]</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>951</th>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>[nan]</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>952</th>\n      <td>1</td>\n      <td>0.250000</td>\n      <td>[nan]</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>953</th>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>[nan]</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1044</th>\n      <td>2</td>\n      <td>0.117647</td>\n      <td>[nan]</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1045</th>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>[nan]</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1046</th>\n      <td>2</td>\n      <td>0.285714</td>\n      <td>[nan]</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1047</th>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>[nan]</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1048</th>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>[nan]</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows × 5 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Syntactic Features","metadata":{}},{"cell_type":"code","source":"# # SYNTACTIC FEATURES\n\n# # Create a set of subjective words for quick lookup\n# subjective_words = set(subj_lex['word1'])\n# emotion_words = set(nrc_lex['word'])\n\n# # Turney's frames\n# def identify_subjectivity_pattern(text):\n#     doc = nlp(text)\n        \n#     patterns = [\n#         (\"ADJ NOUN ANYTHING\", [\"ADJ\", \"NOUN\"]),\n#         (\"ADV ADJ notNOUN\", [\"ADV\", \"ADJ\"]),\n#         (\"ADJ ADJ notNOUN\", [\"ADJ\", \"ADJ\"]),\n#         (\"NOUN ADJ notNOUN\", [\"NOUN\", \"ADJ\"]),\n#         (\"ADV VERB ANYTHING\", [\"ADV\", \"VERB\"])\n#     ]\n\n#     for pattern_name, pattern in patterns:\n#         if pattern_name in [\"ADJ NOUN ANYTHING\", \"ADV VERB ANYTHING\"]:\n#             for i in range(len(doc) - 1):\n#                 if all(doc[i + j].pos_ == pos for j, pos in enumerate(pattern)):\n#                     return pattern_name\n#         else:\n#             for i in range(len(doc) - 1):\n#                 if all(doc[i + j].pos_ == pos for j, pos in enumerate(pattern)) and \\\n#                    (i + len(pattern) < len(doc)) and doc[i + len(pattern)].pos_ != \"NOUN\":\n#                     return pattern_name\n\n#     return None\n\n# # dependency count per dependency per sentence\n# def extract_dependency_counts(text):\n#     doc = nlp(text)\n#     dependency_counts = Counter()\n\n#     for token in doc:\n#         dependency_counts[token.dep_] += 1\n\n#     # Ensure every type of dependency is accounted for\n#     all_deps = [dep for dep in nlp.get_pipe(\"parser\").labels]\n#     for dep in all_deps:\n#         if dep not in dependency_counts:\n#             dependency_counts[dep] = 0\n\n#     return dict(dependency_counts)\n\n# # Function to extract dependency paths as numerical features\n# # IMPORTANT, THE INDICATOR OR THE TARGET, ONE OF THE TWO AT LEAST HAS TO BE A NOUN\n# def extract_dependency_paths_num(text):\n#     doc = nlp(text)\n    \n#     path_direction_counts = Counter()\n#     path_indicator_pos_counts = Counter()\n#     path_dependency_counts = Counter()\n    \n#     # Initialize a flag to indicate if intermediate tokens were encountered\n#     intermediate_present = False\n\n#     # Define valid parts of speech for indicator\n#     valid_indicator_pos = {'ADJ', 'ADV', 'VERB', 'NOUN'}\n    \n#     # Count of valid indicator-target pairs\n#     pair_count = 0\n    \n#     for token in doc:\n#         # Check if the token is an emotion word and a valid indicator\n#         if token.lemma_.lower() in emotion_words and token.pos_ in valid_indicator_pos:\n#             # Check for potential targets (downwards path)\n#             for child in token.children:\n#                 if child.pos_ == 'NOUN':  # Target must be a noun\n#                     # Count the path direction and dependencies\n#                     path_direction_counts[\"down\"] += 1\n#                     path_indicator_pos_counts[token.pos_] += 1\n#                     path_dependency_counts[child.dep_] += 1\n                    \n#                     # Increment the valid pair count\n#                     pair_count += 1\n                    \n#                     # Check if there are intermediate elements\n#                     if any(child.children):\n#                         intermediate_present = True\n\n#             # Check for potential targets (upwards path)\n#             if token.head != token and token.head.pos_ == 'NOUN':  # Target must be a noun\n#                 path_direction_counts[\"up\"] += 1\n#                 path_indicator_pos_counts[token.pos_] += 1\n#                 path_dependency_counts[token.dep_] += 1\n                \n#                 # Increment the valid pair count\n#                 pair_count += 1\n                \n#                 # Check if there are intermediate elements\n#                 if any(token.head.children):\n#                     intermediate_present = True\n\n#     features = {\n#         \"direction_up\": path_direction_counts[\"up\"],\n#         \"direction_down\": path_direction_counts[\"down\"],\n#         \"intermediate_present\": int(intermediate_present),  # 1 if intermediates are present, else 0\n#         \"total_pairs\": pair_count,  # Count of valid indicator-target pairs\n#     }\n    \n#     # Adding counts of indicator parts of speech\n#     for pos, count in path_indicator_pos_counts.items():\n#         features[f'path_indicator_pos_{pos}_count'] = count\n        \n#     # Adding counts of dependencies for the paths\n#     for dep, count in path_dependency_counts.items():\n#         features[f'path_dependency_{dep}_count'] = count\n\n#     return features\n\n\n# def extract_syntactic_features(text):\n        \n#     # Apply SpaCy\n#     doc = nlp(text)\n    \n#     # Initialize LFTK\n#     LFTK = lftk.Extractor(doc)\n    \n#     # Tokenize text\n#     words = word_tokenize(text.lower())\n    \n#     # Preprocessed lists of the tokens\n#     stop_words = set(stopwords.words('english'))\n#     words_filtered = [w for w in words if w.isalpha() and w not in stop_words]\n#     total_words = len(words_filtered)\n    \n#     # Lemmatize words for comparison with lexicon\n#     lemmatized_words = [token.lemma_ for token in doc if token.is_alpha and not token.is_stop]\n    \n#     dependency_counts = extract_dependency_counts(text)\n    \n#     # dependency_paths = extract_dependency_paths(text)\n    \n#     dependency_paths_num = extract_dependency_paths_num(text)\n    \n#     pos_pattern = identify_subjectivity_pattern(text)\n    \n#     # POS\n#     total_number_of_adjectives = extract_single_value(LFTK.extract(features = [\"n_adj\"]))\n#     total_number_of_adpositions = extract_single_value(LFTK.extract(features = [\"n_adp\"]))\n#     total_number_of_adverbs = extract_single_value(LFTK.extract(features = [\"n_adv\"]))\n#     total_number_of_auxiliaries = extract_single_value(LFTK.extract(features = [\"n_aux\"]))\n#     total_number_of_coordinating_conjunctions = extract_single_value(LFTK.extract(features = [\"n_cconj\"]))\n#     total_number_of_determiners = extract_single_value(LFTK.extract(features = [\"n_det\"]))\n#     total_number_of_interjections = extract_single_value(LFTK.extract(features = [\"n_intj\"]))\n#     total_number_of_nouns = extract_single_value(LFTK.extract(features = [\"n_noun\"]))\n#     total_number_of_numerals = extract_single_value(LFTK.extract(features = [\"n_num\"]))\n#     total_number_of_particles = extract_single_value(LFTK.extract(features = [\"n_part\"]))\n#     total_number_of_pronouns = extract_single_value(LFTK.extract(features = [\"n_pron\"]))\n#     total_number_of_proper_nouns = extract_single_value(LFTK.extract(features = [\"n_propn\"]))\n#     total_number_of_punctuations = extract_single_value(LFTK.extract(features = [\"n_punct\"]))\n#     total_number_of_subordinating_conjunctions = extract_single_value(LFTK.extract(features = [\"n_sconj\"]))\n#     total_number_of_verbs = extract_single_value(LFTK.extract(features = [\"n_verb\"]))\n\n#     total_number_of_unique_adjectives = extract_single_value(LFTK.extract(features = [\"n_uadj\"]))\n#     total_number_of_unique_adpositions = extract_single_value(LFTK.extract(features = [\"n_uadp\"]))\n#     total_number_of_unique_adverbs = extract_single_value(LFTK.extract(features = [\"n_uadv\"]))\n#     total_number_of_unique_auxiliaries = extract_single_value(LFTK.extract(features = [\"n_uaux\"]))\n#     total_number_of_unique_coordinating_conjunctions = extract_single_value(LFTK.extract(features = [\"n_ucconj\"]))\n#     total_number_of_unique_determiners = extract_single_value(LFTK.extract(features = [\"n_udet\"]))\n#     total_number_of_unique_interjections = extract_single_value(LFTK.extract(features = [\"n_uintj\"]))\n#     total_number_of_unique_nouns = extract_single_value(LFTK.extract(features = [\"n_unoun\"]))\n#     total_number_of_unique_numerals = extract_single_value(LFTK.extract(features = [\"n_unum\"]))\n#     total_number_of_unique_particles = extract_single_value(LFTK.extract(features = [\"n_upart\"]))\n#     total_number_of_unique_pronouns = extract_single_value(LFTK.extract(features = [\"n_upron\"]))\n#     total_number_of_unique_proper_nouns = extract_single_value(LFTK.extract(features = [\"n_upropn\"]))\n#     total_number_of_unique_punctuations = extract_single_value(LFTK.extract(features = [\"n_upunct\"]))\n#     total_number_of_unique_subordinating_conjunctions = extract_single_value(LFTK.extract(features = [\"n_usconj\"]))\n#     total_number_of_unique_symbols = extract_single_value(LFTK.extract(features = [\"n_usym\"]))\n#     total_number_of_unique_verbs = extract_single_value(LFTK.extract(features = [\"n_uverb\"]))\n\n#     average_number_of_adjectives_per_word = extract_single_value(LFTK.extract(features = [\"a_adj_pw\"]))\n#     average_number_of_adpositions_per_word = extract_single_value(LFTK.extract(features = [\"a_adp_pw\"]))\n#     average_number_of_adverbs_per_word = extract_single_value(LFTK.extract(features = [\"a_adv_pw\"]))\n#     average_number_of_auxiliaries_per_word = extract_single_value(LFTK.extract(features = [\"a_aux_pw\"]))\n#     average_number_of_coordinating_conjunctions_per_word = extract_single_value(LFTK.extract(features = [\"a_cconj_pw\"]))\n#     average_number_of_determiners_per_word = extract_single_value(LFTK.extract(features = [\"a_det_pw\"]))\n#     average_number_of_interjections_per_word = extract_single_value(LFTK.extract(features = [\"a_intj_pw\"]))\n#     average_number_of_nouns_per_word = extract_single_value(LFTK.extract(features = [\"a_noun_pw\"]))\n#     average_number_of_numerals_per_word = extract_single_value(LFTK.extract(features = [\"a_num_pw\"]))\n#     average_number_of_particles_per_word = extract_single_value(LFTK.extract(features = [\"a_part_pw\"]))\n#     average_number_of_pronouns_per_word = extract_single_value(LFTK.extract(features = [\"a_pron_pw\"]))\n#     average_number_of_proper_nouns_per_word = extract_single_value(LFTK.extract(features = [\"a_propn_pw\"]))\n#     average_number_of_punctuations_per_word = extract_single_value(LFTK.extract(features = [\"a_punct_pw\"]))\n#     average_number_of_subordinating_conjunctions_per_word = extract_single_value(LFTK.extract(features = [\"a_sconj_pw\"]))\n#     average_number_of_symbols_per_word = extract_single_value(LFTK.extract(features = [\"a_sym_pw\"]))\n#     average_number_of_verbs_per_word = extract_single_value(LFTK.extract(features = [\"a_verb_pw\"]))\n    \n    \n#     features = {\n        \n#         'pos_pattern': pos_pattern,\n#         'dependency_counts': dependency_counts,\n#    #     'dependency_paths': dependency_paths,\n#         'dependency_paths_num': dependency_paths_num,\n#         'total_number_of_adjectives': total_number_of_adjectives,\n#         'total_number_of_adpositions': total_number_of_adpositions,\n#         'total_number_of_adverbs': total_number_of_adverbs,\n#         'total_number_of_auxiliaries': total_number_of_auxiliaries,\n#         'total_number_of_coordinating_conjunctions': total_number_of_coordinating_conjunctions,\n#         'total_number_of_determiners': total_number_of_determiners,\n#         'total_number_of_interjections': total_number_of_interjections,\n#         'total_number_of_nouns': total_number_of_nouns,\n#         'total_number_of_numerals': total_number_of_numerals,\n#         'total_number_of_particles': total_number_of_particles,\n#         'total_number_of_pronouns': total_number_of_pronouns,\n#         'total_number_of_proper_nouns': total_number_of_proper_nouns,\n#         'total_number_of_punctuations': total_number_of_punctuations,\n#         'total_number_of_subordinating_conjunctions': total_number_of_subordinating_conjunctions,\n#         'total_number_of_verbs': total_number_of_verbs,\n#         'total_number_of_unique_adjectives': total_number_of_unique_adjectives,\n#         'total_number_of_unique_adpositions': total_number_of_unique_adpositions,\n#         'total_number_of_unique_adverbs': total_number_of_unique_adverbs,\n#         'total_number_of_unique_auxiliaries': total_number_of_unique_auxiliaries,\n#         'total_number_of_unique_coordinating_conjunctions': total_number_of_unique_coordinating_conjunctions,\n#         'total_number_of_unique_determiners': total_number_of_unique_determiners,\n#         'total_number_of_unique_interjections': total_number_of_unique_interjections,\n#         'total_number_of_unique_nouns': total_number_of_unique_nouns,\n#         'total_number_of_unique_numerals': total_number_of_unique_numerals,\n#         'total_number_of_unique_particles': total_number_of_unique_particles,\n#         'total_number_of_unique_pronouns': total_number_of_unique_pronouns,\n#         'total_number_of_unique_proper_nouns': total_number_of_unique_proper_nouns,\n#         'total_number_of_unique_punctuations': total_number_of_unique_punctuations,\n#         'total_number_of_unique_subordinating_conjunctions': total_number_of_unique_subordinating_conjunctions,\n#         'total_number_of_unique_verbs': total_number_of_unique_verbs,\n#         'average_number_of_adjectives_per_word': average_number_of_adjectives_per_word,\n#         'average_number_of_adpositions_per_word': average_number_of_adpositions_per_word,\n#         'average_number_of_adverbs_per_word': average_number_of_adverbs_per_word,\n#         'average_number_of_auxiliaries_per_word': average_number_of_auxiliaries_per_word,\n#         'average_number_of_coordinating_conjunctions_per_word': average_number_of_coordinating_conjunctions_per_word,\n#         'average_number_of_determiners_per_word': average_number_of_determiners_per_word,\n#         'average_number_of_interjections_per_word': average_number_of_interjections_per_word,\n#         'average_number_of_nouns_per_word': average_number_of_nouns_per_word,\n#         'average_number_of_numerals_per_word': average_number_of_numerals_per_word,\n#         'average_number_of_particles_per_word': average_number_of_particles_per_word,\n#         'average_number_of_pronouns_per_word' : average_number_of_pronouns_per_word,\n#         'average_number_of_proper_nouns_per_word': average_number_of_proper_nouns_per_word,\n#         'average_number_of_punctuations_per_word': average_number_of_punctuations_per_word,\n#         'average_number_of_subordinating_conjunctions_per_word': average_number_of_subordinating_conjunctions_per_word,\n#         'average_number_of_verbs_per_word': average_number_of_verbs_per_word\n#     }\n    \n# #     features.update(dependency_paths)\n    \n#     return features\n\n    \n# syntactic_features_list=[]\n\n# total_data_points = len(news_df)\n# progress_interval = 250\n\n# # for index, row in mini_df.iterrows():\n# #     text = row['sentence']\n# #     syntactic_features = extract_syntactic_features(text)\n# #     syntactic_features_list.append(syntactic_features)\n\n# for index, row in news_df.iterrows():\n#     text = row['sentence']\n#     syntactic_features = extract_syntactic_features(text)\n#     syntactic_features_list.append(syntactic_features)\n    \n\n#     # Print the progress at intervals\n#     if (index + 1) % progress_interval == 0:\n#         print(f\"Processing data point {index + 1} of {total_data_points}\")    \n    \n# syntactic_df = pd.DataFrame(syntactic_features_list)\n\n# # DataFrame that includes the counts of dependencies per type of dependency\n# dep_df = syntactic_df['dependency_counts'].apply(pd.Series).fillna(0)\n\n# # DataFrame that includes the counts of path features (Inndicator, Target, directionand type of dependency)\n# path_dep_df = syntactic_df['dependency_paths_num'].apply(pd.Series).fillna(0)\n\n# # One-hot encoding for the 5 POS patterns as they are treated as booleans\n# # Initialize OneHotEncoder\n# one_hot_encoder = OneHotEncoder()\n\n# # Fit and transform the data\n# pos_pattern_encoded = one_hot_encoder.fit_transform(syntactic_df[['pos_pattern']]).toarray()\n\n# # Create a DataFrame from the one-hot encoded features\n# pattern_df = pd.DataFrame(pos_pattern_encoded, columns=one_hot_encoder.get_feature_names_out(['pos_pattern']))\n\n# syntactic_df = pd.concat([syntactic_df,  dep_df, pattern_df, path_dep_df], axis=1)\n# syntactic_df = syntactic_df.drop(columns=['pos_pattern', 'dependency_paths_num', 'dependency_counts'])\n# syntactic_df.to_csv('new_syntactic_features_news.csv', index=False)\n\n# syntactic_df.tail(100)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T20:52:45.711156Z","iopub.execute_input":"2024-08-22T20:52:45.711517Z","iopub.status.idle":"2024-08-22T20:52:45.736451Z","shell.execute_reply.started":"2024-08-22T20:52:45.711486Z","shell.execute_reply":"2024-08-22T20:52:45.735067Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"# lexical_df.to_csv('lexical_features_news.csv', index=False)\n# structural_df.to_csv('structural_features_news.csv', index=False)\n# perspective_df.to_csv('perspective_features_news.csv', index=False)\n# affect_df.to_csv('affect_features_news.csv', index=False)\n# epistemic_status_df.to_csv('epistemic_status_features_news.csv', index=False)\n# syntactic_df.to_csv('syntactic_features_news.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T20:52:45.738266Z","iopub.execute_input":"2024-08-22T20:52:45.739122Z","iopub.status.idle":"2024-08-22T20:52:45.753482Z","shell.execute_reply.started":"2024-08-22T20:52:45.739073Z","shell.execute_reply":"2024-08-22T20:52:45.752205Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":"## Feature value normalization","metadata":{}},{"cell_type":"code","source":"lexical_df = pd.read_csv('/kaggle/input/feature-annotations-news/lexical_features_news.csv')\naffect_df = pd.read_csv('/kaggle/input/feature-annotations-news/affect_features_news.csv')\n#epistemic_status_df = pd.read_csv('/kaggle/input/feature-annotations-news/epistemic_status_features_news.csv')\nperspective_df = pd.read_csv('/kaggle/input/feature-annotations-news/perspective_features_news.csv')\nstructural_df = pd.read_csv('/kaggle/input/feature-annotations-news/structural_features_news.csv')\nsyntactic_df = pd.read_csv('/kaggle/input/feature-annotations-news/syntactic_features_news.csv')","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:10:07.425301Z","iopub.execute_input":"2024-08-23T00:10:07.425750Z","iopub.status.idle":"2024-08-23T00:10:07.511928Z","shell.execute_reply.started":"2024-08-23T00:10:07.425717Z","shell.execute_reply":"2024-08-23T00:10:07.510708Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":"## Combination of all the groups of features in one df\n\n### The categorical features are turned into booleans, but the continuous features have to be normalised so that the models make correct predictions","metadata":{}},{"cell_type":"code","source":"# Remove NaN values for the pcr\nlexical_df = lexical_df.fillna(0)\nstructural_df = structural_df.fillna(0)\nsyntactic_df = syntactic_df.fillna(0)\nperspective_df = perspective_df.fillna(0)\naffect_df = affect_df.fillna(0)\nepistemic_status_df = epistemic_status_df.fillna(0)\n\n# Replace [nan] with [0] in columns containing lists\ndef replace_nan_list(column):\n    return column.apply(lambda x: 0 if isinstance(x, list) and len(x) == 1 and np.isnan(x[0]) else x)\n\n# Apply the function to relevant columns\nfor col in epistemic_status_df.columns:\n    if any(isinstance(i, list) for i in epistemic_status_df[col]):\n        epistemic_status_df[col] = replace_nan_list(epistemic_status_df[col])\n        \n# Remove square brackets by extracting the first element of lists\ndef extract_first_element(column):\n    return column.apply(lambda x: x[0] if isinstance(x, list) and len(x) == 1 else x)\n\n# Apply the function to relevant columns\nfor col in epistemic_status_df.columns:\n    if any(isinstance(i, list) for i in epistemic_status_df[col]):\n        epistemic_status_df[col] = extract_first_element(epistemic_status_df[col])\n\n# Remove cells that include text\n# epistemic_status_df = epistemic_status_df.drop(columns=['sentiment_scores', 'emotion_scores'])     \n        \nepistemic_status_df.tail(100)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:10:11.955584Z","iopub.execute_input":"2024-08-23T00:10:11.955997Z","iopub.status.idle":"2024-08-23T00:10:11.987177Z","shell.execute_reply.started":"2024-08-23T00:10:11.955962Z","shell.execute_reply":"2024-08-23T00:10:11.986090Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"      num_modals  ratio_modals  veridicality_score  num_epistemic_verbs  \\\n949            0      0.000000                 0.0                    0   \n950            1      0.090909                 0.0                    0   \n951            0      0.000000                 0.0                    0   \n952            1      0.250000                 0.0                    0   \n953            0      0.000000                 0.0                    0   \n...          ...           ...                 ...                  ...   \n1044           2      0.117647                 0.0                    0   \n1045           0      0.000000                 0.0                    0   \n1046           2      0.285714                 0.0                    0   \n1047           0      0.000000                 0.0                    0   \n1048           0      0.000000                 0.0                    0   \n\n      ratio_epistemic_verbs  \n949                     0.0  \n950                     0.0  \n951                     0.0  \n952                     0.0  \n953                     0.0  \n...                     ...  \n1044                    0.0  \n1045                    0.0  \n1046                    0.0  \n1047                    0.0  \n1048                    0.0  \n\n[100 rows x 5 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>num_modals</th>\n      <th>ratio_modals</th>\n      <th>veridicality_score</th>\n      <th>num_epistemic_verbs</th>\n      <th>ratio_epistemic_verbs</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>949</th>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>950</th>\n      <td>1</td>\n      <td>0.090909</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>951</th>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>952</th>\n      <td>1</td>\n      <td>0.250000</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>953</th>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1044</th>\n      <td>2</td>\n      <td>0.117647</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1045</th>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1046</th>\n      <td>2</td>\n      <td>0.285714</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1047</th>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1048</th>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows × 5 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# ALL FEATURES\nall_features_df_non_stand = pd.concat([news_df, lexical_df, structural_df, syntactic_df, perspective_df, affect_df, epistemic_status_df], axis=1)\nall_features_df_non_stand = all_features_df_non_stand.drop(columns=['sentence', 'label'])\n\nall_features_df_non_stand.tail(100)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:10:18.523991Z","iopub.execute_input":"2024-08-23T00:10:18.524394Z","iopub.status.idle":"2024-08-23T00:10:18.563768Z","shell.execute_reply.started":"2024-08-23T00:10:18.524362Z","shell.execute_reply":"2024-08-23T00:10:18.562644Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"      total_subtlex_us_zipf_of_words  \\\n949                          151.876   \n950                          116.389   \n951                           92.780   \n952                           30.189   \n953                          291.289   \n...                              ...   \n1044                         182.509   \n1045                          88.247   \n1046                          73.981   \n1047                          39.749   \n1048                          73.507   \n\n      average_subtlex_us_zipf_of_words_per_word  \\\n949                                       5.063   \n950                                       4.157   \n951                                       3.711   \n952                                       5.032   \n953                                       4.103   \n...                                         ...   \n1044                                      4.451   \n1045                                      4.202   \n1046                                      4.932   \n1047                                      4.417   \n1048                                      4.084   \n\n      total_number_of_named_entities  \\\n949                                0   \n950                                0   \n951                                0   \n952                                0   \n953                                3   \n...                              ...   \n1044                               4   \n1045                               0   \n1046                               0   \n1047                               0   \n1048                               0   \n\n      average_number_of_named_entities_per_word  \\\n949                                       0.000   \n950                                       0.000   \n951                                       0.000   \n952                                       0.000   \n953                                       0.042   \n...                                         ...   \n1044                                      0.098   \n1045                                      0.000   \n1046                                      0.000   \n1047                                      0.000   \n1048                                      0.000   \n\n      total_number_of_named_entities_person  \\\n949                                       0   \n950                                       0   \n951                                       0   \n952                                       0   \n953                                       0   \n...                                     ...   \n1044                                      1   \n1045                                      0   \n1046                                      0   \n1047                                      0   \n1048                                      0   \n\n      average_number_of_named_entities_person_per_word  \\\n949                                              0.000   \n950                                              0.000   \n951                                              0.000   \n952                                              0.000   \n953                                              0.000   \n...                                                ...   \n1044                                             0.024   \n1045                                             0.000   \n1046                                             0.000   \n1047                                             0.000   \n1048                                             0.000   \n\n      num_strong_subjectivity_clues  ratio_strong_subjectivity_clues  \\\n949                               2                         0.142857   \n950                               0                         0.000000   \n951                               0                         0.000000   \n952                               0                         0.000000   \n953                               2                         0.068966   \n...                             ...                              ...   \n1044                              0                         0.000000   \n1045                              0                         0.000000   \n1046                              2                         0.285714   \n1047                              2                         0.666667   \n1048                              1                         0.125000   \n\n      num_weak_subjectivity_clues  ratio_weak_subjectivity_clues  ...  \\\n949                             3                       0.214286  ...   \n950                             3                       0.272727  ...   \n951                             0                       0.000000  ...   \n952                             2                       0.500000  ...   \n953                             1                       0.034483  ...   \n...                           ...                            ...  ...   \n1044                            2                       0.117647  ...   \n1045                            2                       0.200000  ...   \n1046                            0                       0.000000  ...   \n1047                            0                       0.000000  ...   \n1048                            5                       0.625000  ...   \n\n         anger    neg    neu    pos  compound  num_modals  ratio_modals  \\\n949   0.001430  0.168  0.727  0.105   -0.2315           0      0.000000   \n950   0.003990  0.222  0.778  0.000   -0.6908           1      0.090909   \n951   0.001202  0.000  1.000  0.000    0.0000           0      0.000000   \n952   0.009210  0.437  0.563  0.000   -0.4767           1      0.250000   \n953   0.002950  0.126  0.874  0.000   -0.7579           0      0.000000   \n...        ...    ...    ...    ...       ...         ...           ...   \n1044  0.000758  0.072  0.928  0.000   -0.3400           2      0.117647   \n1045  0.000939  0.309  0.691  0.000   -0.7717           0      0.000000   \n1046  0.001034  0.000  0.811  0.189    0.4215           2      0.285714   \n1047  0.000727  0.000  1.000  0.000    0.0000           0      0.000000   \n1048  0.003093  0.254  0.595  0.151   -0.2263           0      0.000000   \n\n      veridicality_score  num_epistemic_verbs  ratio_epistemic_verbs  \n949                  0.0                    0                    0.0  \n950                  0.0                    0                    0.0  \n951                  0.0                    0                    0.0  \n952                  0.0                    0                    0.0  \n953                  0.0                    0                    0.0  \n...                  ...                  ...                    ...  \n1044                 0.0                    0                    0.0  \n1045                 0.0                    0                    0.0  \n1046                 0.0                    0                    0.0  \n1047                 0.0                    0                    0.0  \n1048                 0.0                    0                    0.0  \n\n[100 rows x 258 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_subtlex_us_zipf_of_words</th>\n      <th>average_subtlex_us_zipf_of_words_per_word</th>\n      <th>total_number_of_named_entities</th>\n      <th>average_number_of_named_entities_per_word</th>\n      <th>total_number_of_named_entities_person</th>\n      <th>average_number_of_named_entities_person_per_word</th>\n      <th>num_strong_subjectivity_clues</th>\n      <th>ratio_strong_subjectivity_clues</th>\n      <th>num_weak_subjectivity_clues</th>\n      <th>ratio_weak_subjectivity_clues</th>\n      <th>...</th>\n      <th>anger</th>\n      <th>neg</th>\n      <th>neu</th>\n      <th>pos</th>\n      <th>compound</th>\n      <th>num_modals</th>\n      <th>ratio_modals</th>\n      <th>veridicality_score</th>\n      <th>num_epistemic_verbs</th>\n      <th>ratio_epistemic_verbs</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>949</th>\n      <td>151.876</td>\n      <td>5.063</td>\n      <td>0</td>\n      <td>0.000</td>\n      <td>0</td>\n      <td>0.000</td>\n      <td>2</td>\n      <td>0.142857</td>\n      <td>3</td>\n      <td>0.214286</td>\n      <td>...</td>\n      <td>0.001430</td>\n      <td>0.168</td>\n      <td>0.727</td>\n      <td>0.105</td>\n      <td>-0.2315</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>950</th>\n      <td>116.389</td>\n      <td>4.157</td>\n      <td>0</td>\n      <td>0.000</td>\n      <td>0</td>\n      <td>0.000</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>3</td>\n      <td>0.272727</td>\n      <td>...</td>\n      <td>0.003990</td>\n      <td>0.222</td>\n      <td>0.778</td>\n      <td>0.000</td>\n      <td>-0.6908</td>\n      <td>1</td>\n      <td>0.090909</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>951</th>\n      <td>92.780</td>\n      <td>3.711</td>\n      <td>0</td>\n      <td>0.000</td>\n      <td>0</td>\n      <td>0.000</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.001202</td>\n      <td>0.000</td>\n      <td>1.000</td>\n      <td>0.000</td>\n      <td>0.0000</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>952</th>\n      <td>30.189</td>\n      <td>5.032</td>\n      <td>0</td>\n      <td>0.000</td>\n      <td>0</td>\n      <td>0.000</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>2</td>\n      <td>0.500000</td>\n      <td>...</td>\n      <td>0.009210</td>\n      <td>0.437</td>\n      <td>0.563</td>\n      <td>0.000</td>\n      <td>-0.4767</td>\n      <td>1</td>\n      <td>0.250000</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>953</th>\n      <td>291.289</td>\n      <td>4.103</td>\n      <td>3</td>\n      <td>0.042</td>\n      <td>0</td>\n      <td>0.000</td>\n      <td>2</td>\n      <td>0.068966</td>\n      <td>1</td>\n      <td>0.034483</td>\n      <td>...</td>\n      <td>0.002950</td>\n      <td>0.126</td>\n      <td>0.874</td>\n      <td>0.000</td>\n      <td>-0.7579</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1044</th>\n      <td>182.509</td>\n      <td>4.451</td>\n      <td>4</td>\n      <td>0.098</td>\n      <td>1</td>\n      <td>0.024</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>2</td>\n      <td>0.117647</td>\n      <td>...</td>\n      <td>0.000758</td>\n      <td>0.072</td>\n      <td>0.928</td>\n      <td>0.000</td>\n      <td>-0.3400</td>\n      <td>2</td>\n      <td>0.117647</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1045</th>\n      <td>88.247</td>\n      <td>4.202</td>\n      <td>0</td>\n      <td>0.000</td>\n      <td>0</td>\n      <td>0.000</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>2</td>\n      <td>0.200000</td>\n      <td>...</td>\n      <td>0.000939</td>\n      <td>0.309</td>\n      <td>0.691</td>\n      <td>0.000</td>\n      <td>-0.7717</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1046</th>\n      <td>73.981</td>\n      <td>4.932</td>\n      <td>0</td>\n      <td>0.000</td>\n      <td>0</td>\n      <td>0.000</td>\n      <td>2</td>\n      <td>0.285714</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.001034</td>\n      <td>0.000</td>\n      <td>0.811</td>\n      <td>0.189</td>\n      <td>0.4215</td>\n      <td>2</td>\n      <td>0.285714</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1047</th>\n      <td>39.749</td>\n      <td>4.417</td>\n      <td>0</td>\n      <td>0.000</td>\n      <td>0</td>\n      <td>0.000</td>\n      <td>2</td>\n      <td>0.666667</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000727</td>\n      <td>0.000</td>\n      <td>1.000</td>\n      <td>0.000</td>\n      <td>0.0000</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1048</th>\n      <td>73.507</td>\n      <td>4.084</td>\n      <td>0</td>\n      <td>0.000</td>\n      <td>0</td>\n      <td>0.000</td>\n      <td>1</td>\n      <td>0.125000</td>\n      <td>5</td>\n      <td>0.625000</td>\n      <td>...</td>\n      <td>0.003093</td>\n      <td>0.254</td>\n      <td>0.595</td>\n      <td>0.151</td>\n      <td>-0.2263</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows × 258 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Remove boolean columns\ncontinuous_df = all_features_df_non_stand.drop(columns=['pos_pattern_ADJ ADJ notNOUN', \n                             'pos_pattern_ADJ NOUN ANYTHING', 'pos_pattern_ADV ADJ notNOUN',\n                             'pos_pattern_ADV VERB ANYTHING', 'pos_pattern_NOUN ADJ notNOUN',\n                             'pos_pattern_None', 'intermediate_present'])\n\nboolean_df = all_features_df_non_stand[['pos_pattern_ADJ ADJ notNOUN', \n                             'pos_pattern_ADJ NOUN ANYTHING', 'pos_pattern_ADV ADJ notNOUN',\n                             'pos_pattern_ADV VERB ANYTHING', 'pos_pattern_NOUN ADJ notNOUN',\n                             'pos_pattern_None', 'intermediate_present']]\n# Convert boolean columns from float to integer\nboolean_df = boolean_df.astype(int)\n\n# Initialize StandardScaler\nscaler = StandardScaler()\n\n# Fit and transform the features\ncontinuous_df_standardized = scaler.fit_transform(continuous_df)\ncontinuous_df_standardized_df = pd.DataFrame(continuous_df_standardized, columns=continuous_df.columns)\n\n# add the boolean columns\nstandardized_all_features_df = pd.concat([continuous_df_standardized_df, boolean_df], axis=1)\nstandardized_all_features_df.tail(100)\n\nall_features_df = pd.concat([news_df, standardized_all_features_df], axis=1)\nall_features_df.tail(100)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:10:22.533331Z","iopub.execute_input":"2024-08-23T00:10:22.533763Z","iopub.status.idle":"2024-08-23T00:10:22.592592Z","shell.execute_reply.started":"2024-08-23T00:10:22.533729Z","shell.execute_reply":"2024-08-23T00:10:22.591256Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"                                               sentence  label  \\\n949   [W]ill you really feel good at the end of the ...      0   \n950   The book doesn’t just cast white folks (not fo...      1   \n951   Beyond all the double talk and cant, that’s wh...      1   \n952                       What could possibly go wrong?      1   \n953   But, alas, The Social Contract Magazine is no ...      0   \n...                                                 ...    ...   \n1044  A lot of subsequent unpleasantness could have ...      1   \n1045  Nevertheless, they have also brought with them...      1   \n1046  We may have faith that human inventiveness wil...      1   \n1047           But in fact it was intensely rational.\\n      1   \n1048  Yet no environmentalist hoping to influence no...      1   \n\n      total_subtlex_us_zipf_of_words  \\\n949                         0.412593   \n950                        -0.086859   \n951                        -0.419138   \n952                        -1.300059   \n953                         2.374725   \n...                              ...   \n1044                        0.843729   \n1045                       -0.482936   \n1046                       -0.683720   \n1047                       -1.165509   \n1048                       -0.690391   \n\n      average_subtlex_us_zipf_of_words_per_word  \\\n949                                    1.189794   \n950                                   -0.256309   \n951                                   -0.968188   \n952                                    1.140314   \n953                                   -0.342501   \n...                                         ...   \n1044                                   0.212956   \n1045                                  -0.184483   \n1046                                   0.980700   \n1047                                   0.158687   \n1048                                  -0.372827   \n\n      total_number_of_named_entities  \\\n949                        -0.819557   \n950                        -0.819557   \n951                        -0.819557   \n952                        -0.819557   \n953                         0.875020   \n...                              ...   \n1044                        1.439879   \n1045                       -0.819557   \n1046                       -0.819557   \n1047                       -0.819557   \n1048                       -0.819557   \n\n      average_number_of_named_entities_per_word  \\\n949                                   -0.877088   \n950                                   -0.877088   \n951                                   -0.877088   \n952                                   -0.877088   \n953                                   -0.131708   \n...                                         ...   \n1044                                   0.862133   \n1045                                  -0.877088   \n1046                                  -0.877088   \n1047                                  -0.877088   \n1048                                  -0.877088   \n\n      total_number_of_named_entities_person  \\\n949                               -0.394937   \n950                               -0.394937   \n951                               -0.394937   \n952                               -0.394937   \n953                               -0.394937   \n...                                     ...   \n1044                               1.398522   \n1045                              -0.394937   \n1046                              -0.394937   \n1047                              -0.394937   \n1048                              -0.394937   \n\n      average_number_of_named_entities_person_per_word  \\\n949                                          -0.381045   \n950                                          -0.381045   \n951                                          -0.381045   \n952                                          -0.381045   \n953                                          -0.381045   \n...                                                ...   \n1044                                          0.833744   \n1045                                         -0.381045   \n1046                                         -0.381045   \n1047                                         -0.381045   \n1048                                         -0.381045   \n\n      num_strong_subjectivity_clues  ratio_strong_subjectivity_clues  ...  \\\n949                        0.640697                         0.272201  ...   \n950                       -0.902566                        -0.799793  ...   \n951                       -0.902566                        -0.799793  ...   \n952                       -0.902566                        -0.799793  ...   \n953                        0.640697                        -0.282279  ...   \n...                             ...                              ...  ...   \n1044                      -0.902566                        -0.799793  ...   \n1045                      -0.902566                        -0.799793  ...   \n1046                       0.640697                         1.344195  ...   \n1047                       0.640697                         4.202845  ...   \n1048                      -0.130935                         0.138202  ...   \n\n      veridicality_score  num_epistemic_verbs  ratio_epistemic_verbs  \\\n949             0.104307            -0.587089              -0.427673   \n950             0.104307            -0.587089              -0.427673   \n951             0.104307            -0.587089              -0.427673   \n952             0.104307            -0.587089              -0.427673   \n953             0.104307            -0.587089              -0.427673   \n...                  ...                  ...                    ...   \n1044            0.104307            -0.587089              -0.427673   \n1045            0.104307            -0.587089              -0.427673   \n1046            0.104307            -0.587089              -0.427673   \n1047            0.104307            -0.587089              -0.427673   \n1048            0.104307            -0.587089              -0.427673   \n\n      pos_pattern_ADJ ADJ notNOUN  pos_pattern_ADJ NOUN ANYTHING  \\\n949                             0                              0   \n950                             0                              1   \n951                             0                              1   \n952                             0                              0   \n953                             0                              1   \n...                           ...                            ...   \n1044                            0                              1   \n1045                            0                              0   \n1046                            0                              1   \n1047                            0                              0   \n1048                            0                              1   \n\n      pos_pattern_ADV ADJ notNOUN  pos_pattern_ADV VERB ANYTHING  \\\n949                             0                              1   \n950                             0                              0   \n951                             0                              0   \n952                             0                              1   \n953                             0                              0   \n...                           ...                            ...   \n1044                            0                              0   \n1045                            0                              1   \n1046                            0                              0   \n1047                            1                              0   \n1048                            0                              0   \n\n      pos_pattern_NOUN ADJ notNOUN  pos_pattern_None  intermediate_present  \n949                              0                 0                     1  \n950                              0                 0                     1  \n951                              0                 0                     1  \n952                              0                 0                     0  \n953                              0                 0                     1  \n...                            ...               ...                   ...  \n1044                             0                 0                     1  \n1045                             0                 0                     1  \n1046                             0                 0                     1  \n1047                             0                 0                     0  \n1048                             0                 0                     1  \n\n[100 rows x 260 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sentence</th>\n      <th>label</th>\n      <th>total_subtlex_us_zipf_of_words</th>\n      <th>average_subtlex_us_zipf_of_words_per_word</th>\n      <th>total_number_of_named_entities</th>\n      <th>average_number_of_named_entities_per_word</th>\n      <th>total_number_of_named_entities_person</th>\n      <th>average_number_of_named_entities_person_per_word</th>\n      <th>num_strong_subjectivity_clues</th>\n      <th>ratio_strong_subjectivity_clues</th>\n      <th>...</th>\n      <th>veridicality_score</th>\n      <th>num_epistemic_verbs</th>\n      <th>ratio_epistemic_verbs</th>\n      <th>pos_pattern_ADJ ADJ notNOUN</th>\n      <th>pos_pattern_ADJ NOUN ANYTHING</th>\n      <th>pos_pattern_ADV ADJ notNOUN</th>\n      <th>pos_pattern_ADV VERB ANYTHING</th>\n      <th>pos_pattern_NOUN ADJ notNOUN</th>\n      <th>pos_pattern_None</th>\n      <th>intermediate_present</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>949</th>\n      <td>[W]ill you really feel good at the end of the ...</td>\n      <td>0</td>\n      <td>0.412593</td>\n      <td>1.189794</td>\n      <td>-0.819557</td>\n      <td>-0.877088</td>\n      <td>-0.394937</td>\n      <td>-0.381045</td>\n      <td>0.640697</td>\n      <td>0.272201</td>\n      <td>...</td>\n      <td>0.104307</td>\n      <td>-0.587089</td>\n      <td>-0.427673</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>950</th>\n      <td>The book doesn’t just cast white folks (not fo...</td>\n      <td>1</td>\n      <td>-0.086859</td>\n      <td>-0.256309</td>\n      <td>-0.819557</td>\n      <td>-0.877088</td>\n      <td>-0.394937</td>\n      <td>-0.381045</td>\n      <td>-0.902566</td>\n      <td>-0.799793</td>\n      <td>...</td>\n      <td>0.104307</td>\n      <td>-0.587089</td>\n      <td>-0.427673</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>951</th>\n      <td>Beyond all the double talk and cant, that’s wh...</td>\n      <td>1</td>\n      <td>-0.419138</td>\n      <td>-0.968188</td>\n      <td>-0.819557</td>\n      <td>-0.877088</td>\n      <td>-0.394937</td>\n      <td>-0.381045</td>\n      <td>-0.902566</td>\n      <td>-0.799793</td>\n      <td>...</td>\n      <td>0.104307</td>\n      <td>-0.587089</td>\n      <td>-0.427673</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>952</th>\n      <td>What could possibly go wrong?</td>\n      <td>1</td>\n      <td>-1.300059</td>\n      <td>1.140314</td>\n      <td>-0.819557</td>\n      <td>-0.877088</td>\n      <td>-0.394937</td>\n      <td>-0.381045</td>\n      <td>-0.902566</td>\n      <td>-0.799793</td>\n      <td>...</td>\n      <td>0.104307</td>\n      <td>-0.587089</td>\n      <td>-0.427673</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>953</th>\n      <td>But, alas, The Social Contract Magazine is no ...</td>\n      <td>0</td>\n      <td>2.374725</td>\n      <td>-0.342501</td>\n      <td>0.875020</td>\n      <td>-0.131708</td>\n      <td>-0.394937</td>\n      <td>-0.381045</td>\n      <td>0.640697</td>\n      <td>-0.282279</td>\n      <td>...</td>\n      <td>0.104307</td>\n      <td>-0.587089</td>\n      <td>-0.427673</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1044</th>\n      <td>A lot of subsequent unpleasantness could have ...</td>\n      <td>1</td>\n      <td>0.843729</td>\n      <td>0.212956</td>\n      <td>1.439879</td>\n      <td>0.862133</td>\n      <td>1.398522</td>\n      <td>0.833744</td>\n      <td>-0.902566</td>\n      <td>-0.799793</td>\n      <td>...</td>\n      <td>0.104307</td>\n      <td>-0.587089</td>\n      <td>-0.427673</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1045</th>\n      <td>Nevertheless, they have also brought with them...</td>\n      <td>1</td>\n      <td>-0.482936</td>\n      <td>-0.184483</td>\n      <td>-0.819557</td>\n      <td>-0.877088</td>\n      <td>-0.394937</td>\n      <td>-0.381045</td>\n      <td>-0.902566</td>\n      <td>-0.799793</td>\n      <td>...</td>\n      <td>0.104307</td>\n      <td>-0.587089</td>\n      <td>-0.427673</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1046</th>\n      <td>We may have faith that human inventiveness wil...</td>\n      <td>1</td>\n      <td>-0.683720</td>\n      <td>0.980700</td>\n      <td>-0.819557</td>\n      <td>-0.877088</td>\n      <td>-0.394937</td>\n      <td>-0.381045</td>\n      <td>0.640697</td>\n      <td>1.344195</td>\n      <td>...</td>\n      <td>0.104307</td>\n      <td>-0.587089</td>\n      <td>-0.427673</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1047</th>\n      <td>But in fact it was intensely rational.\\n</td>\n      <td>1</td>\n      <td>-1.165509</td>\n      <td>0.158687</td>\n      <td>-0.819557</td>\n      <td>-0.877088</td>\n      <td>-0.394937</td>\n      <td>-0.381045</td>\n      <td>0.640697</td>\n      <td>4.202845</td>\n      <td>...</td>\n      <td>0.104307</td>\n      <td>-0.587089</td>\n      <td>-0.427673</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1048</th>\n      <td>Yet no environmentalist hoping to influence no...</td>\n      <td>1</td>\n      <td>-0.690391</td>\n      <td>-0.372827</td>\n      <td>-0.819557</td>\n      <td>-0.877088</td>\n      <td>-0.394937</td>\n      <td>-0.381045</td>\n      <td>-0.130935</td>\n      <td>0.138202</td>\n      <td>...</td>\n      <td>0.104307</td>\n      <td>-0.587089</td>\n      <td>-0.427673</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows × 260 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## PCA for datset exploration \n\n### Pca provides clustering of the features for corpus exploration, regarding the features so far","metadata":{}},{"cell_type":"code","source":"#no missing values\nall_features_df = all_features_df.fillna(0)\n\n#Separate features and labels\nfeatures = all_features_df.drop(columns=['label', 'sentence'])\nlabels = all_features_df['label']\n\n#Standardize the data\nscaler = StandardScaler()\nscaled_features = scaler.fit_transform(features)\n\n#Apply PCA\npca = PCA(n_components=2)  # Choosing 2 components for visualization purposes\nprincipal_components = pca.fit_transform(scaled_features)\n\n#Create a DataFrame with the principal components\npca_df = pd.DataFrame(data=principal_components, columns=['PC1', 'PC2'])\npca_df['label'] = labels.values  # Add labels to the PCA DataFrame\n\n#Print the explained variance ratio\nprint(\"Explained Variance Ratio:\", pca.explained_variance_ratio_)\n\n#Visualize the results\nplt.figure(figsize=(8, 6))\ncolors = {0: 'blue', 1: 'red'}\nplt.scatter(pca_df['PC1'], pca_df['PC2'], c=pca_df['label'].map(colors))\nplt.title('PCA of Features News')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.legend(handles=[plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='blue', markersize=10, label='Objective (0)'),\n                    plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='red', markersize=10, label='Subjective (1)')])\nplt.savefig('pca_news_290.png')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-22T21:56:43.904712Z","iopub.execute_input":"2024-08-22T21:56:43.905696Z","iopub.status.idle":"2024-08-22T21:56:44.734526Z","shell.execute_reply.started":"2024-08-22T21:56:43.905528Z","shell.execute_reply":"2024-08-22T21:56:44.733094Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stdout","text":"Explained Variance Ratio: [0.12059279 0.04520785]\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### Run the same code for SUBJ","metadata":{}},{"cell_type":"code","source":"# # LEXICAL FEATURE ANNOTATION\n# lexical_features_list = []\n# for index, row in subj_df.iterrows():\n#     text = row['text']\n#     lexical_features = extract_lexical_features(text)\n#     lexical_features_list.append(lexical_features)\n\n# # Create DataFrame for lexical features\n# lexical_df = pd.DataFrame(lexical_features_list)\n\n\n# lexical_df.tail(100)\n\n\n# # SEMANTIC FEATURE ANNOTATION\n# for index, row in subj_df.iterrows():\n#     text = row['text']\n#     semantic_features = extract_semantic_features(text)\n#     semantic_features_list.append(semantic_features)\n\n# # Create DataFrame for lexical features\n# semantic_df = pd.DataFrame(semantic_features_list)\n\n# # Extract emotions into separate columns\n# emotion_df = semantic_df['emotion_scores'].apply(pd.Series).fillna(0)\n\n# # Concatenate the original dataframe with the emotion dataframe\n# semantic_df = pd.concat([semantic_df, emotion_df], axis=1)\n\n# semantic_df.tail(100)\n\n\n# # SYNTACTICAL FEATURE ANNOTATION\n\n# for index, row in subj_df.iterrows():\n#     text = row['text']\n#     syntactical_features = extract_syntactical_features(text)\n#     syntactical_features_list.append(syntactical_features)\n\n# syntactical_df = pd.DataFrame(syntactical_features_list)\n\n# # Initialize OneHotEncoder\n# one_hot_encoder = OneHotEncoder()\n\n# # Fit and transform the data\n# pos_pattern_encoded = one_hot_encoder.fit_transform(syntactical_df[['pos_pattern']]).toarray()\n\n# # Create a DataFrame from the one-hot encoded features\n# syntactical_df = pd.DataFrame(pos_pattern_encoded, columns=one_hot_encoder.get_feature_names_out(['pos_pattern']))\n\n# syntactical_df.head(100)\n\n\n# # PCA preparation\n\n# lexical_df.fillna(0)\n# semantic_df.fillna(0)\n\n# # Replace [nan] with [0] in columns containing lists\n# for col in semantic_df.columns:\n#     if any(isinstance(i, list) for i in semantic_df[col]):\n#         semantic_df[col] = replace_nan_list(semantic_df[col])\n\n# # Remove square brackets by extracting the first element of lists\n# for col in semantic_df.columns:\n#     if any(isinstance(i, list) for i in semantic_df[col]):\n#         semantic_df[col] = extract_first_element(semantic_df[col])\n        \n        \n# # Remove cells that include text\n# semantic_df = semantic_df.drop(columns=['sentiment_scores', 'emotion_scores'])     \n        \n# semantic_df.tail(100)\n\n# # ALL FEATURES\n# all_features_df = pd.concat([news_df, lexical_df, semantic_df, syntactical_df], axis=1)\n# all_features_df = all_features_df.drop(columns='text')\n\n# all_features_df.head(100)\n\n# # Step 1: Ensure no missing values\n# all_features_df = all_features_df.fillna(0)\n\n# # Step 2: Separate features and labels\n# features = all_features_df.drop(columns=['label'])\n# labels = all_features_df['label']\n\n# # Step 3: Standardize the data\n# scaler = StandardScaler()\n# scaled_features = scaler.fit_transform(features)\n\n# # Step 4: Apply PCA\n# pca = PCA(n_components=2)  # Choosing 2 components for visualization purposes\n# principal_components = pca.fit_transform(scaled_features)\n\n# # Create a DataFrame with the principal components\n# pca_df = pd.DataFrame(data=principal_components, columns=['PC1', 'PC2'])\n# pca_df['label'] = labels.values  # Add labels to the PCA DataFrame\n\n# # Print the explained variance ratio\n# print(\"Explained Variance Ratio:\", pca.explained_variance_ratio_)\n\n# # Visualize the results with color coding\n# plt.figure(figsize=(8, 6))\n# colors = {0: 'blue', 1: 'red'}\n# plt.scatter(pca_df['PC1'], pca_df['PC2'], c=pca_df['label'].map(colors))\n# plt.title('PCA of Features')\n# plt.xlabel('Principal Component 1')\n# plt.ylabel('Principal Component 2')\n# plt.legend(handles=[plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='blue', markersize=10, label='Objective (0)'),\n#                     plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='red', markersize=10, label='Subjective (1)')])\n# plt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-22T21:56:44.736810Z","iopub.execute_input":"2024-08-22T21:56:44.737394Z","iopub.status.idle":"2024-08-22T21:56:44.748217Z","shell.execute_reply.started":"2024-08-22T21:56:44.737344Z","shell.execute_reply":"2024-08-22T21:56:44.746562Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"markdown","source":"## Feature Selection (LASSO)\n### The high dimensionality of the features should be reduced, so that only the most influential ones are kept. Thus, a LASSO regression model is employed, in order to get rid of those that correlate too much, or those that don't help with the classification","metadata":{}},{"cell_type":"code","source":"# Lasso reduction \nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import Lasso, LassoCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import mean_squared_error\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Assign X and labels\nX = all_features_df.drop(columns=['label', 'sentence'])\ny = all_features_df['label']\n\n# Split in train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Feature standardisation\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Lasso train\nlasso = Lasso(alpha=0.1)\nlasso.fit(X_train_scaled, y_train)\n\n# Performance evaluation on test subdivision\ny_pred = lasso.predict(X_test_scaled)\nmse = mean_squared_error(y_test, y_pred)\nprint(f'Mean Squared Error: {mse}')\n\n# Get the coefficients from the Lasso model\nlasso_coefficients = lasso.coef_\n\n# Create a DataFrame to see the features with non-zero coefficients\nfeature_importance = pd.DataFrame({\n    'Feature': X.columns,\n    'Coefficient': lasso_coefficients\n})\n\n# Filter out the features with non-zero coefficients\nselected_features = feature_importance[feature_importance['Coefficient'] != 0]\n\nprint(f\"Selected Features: \\n{selected_features}\")\nprint(len(selected_features))\nselected_features = selected_features.sort_values(by='Coefficient', ascending=False)\nselected_features.tail(100)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:10:34.577507Z","iopub.execute_input":"2024-08-23T00:10:34.577916Z","iopub.status.idle":"2024-08-23T00:10:34.758097Z","shell.execute_reply.started":"2024-08-23T00:10:34.577885Z","shell.execute_reply":"2024-08-23T00:10:34.756892Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Mean Squared Error: 0.213617425212331\nSelected Features: \n                                     Feature  Coefficient\n3  average_number_of_named_entities_per_word    -0.030936\n6              num_strong_subjectivity_clues     0.039095\n2\n","output_type":"stream"},{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"                                     Feature  Coefficient\n6              num_strong_subjectivity_clues     0.039095\n3  average_number_of_named_entities_per_word    -0.030936","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Feature</th>\n      <th>Coefficient</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6</th>\n      <td>num_strong_subjectivity_clues</td>\n      <td>0.039095</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>average_number_of_named_entities_per_word</td>\n      <td>-0.030936</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Lasso returned only 2 features, which means that alpha is not correctly adjusted. Thus, I will run lasso cross validation to find the optimal alpha for the dataset","metadata":{}},{"cell_type":"code","source":"# Optimal aplpha, which controls the strength of regularization applied to the model biger=weaker\nalphas = np.logspace(-3, 5, 50) # 0.001 - 10, 50 times\nlasso_cv = LassoCV(alphas=alphas, cv=10)\nlasso_cv.fit(X_train_scaled, y_train)\n\nbest_alpha = lasso_cv.alpha_\nprint(f'Best alpha: {best_alpha}')\n\nlasso_best = Lasso(alpha=best_alpha)\nlasso_best.fit(X_train_scaled, y_train)\n\nfrom sklearn.model_selection import cross_val_score\n\nlasso_cv_scores = cross_val_score(lasso_best, X_train_scaled, y_train, cv=10, scoring='neg_mean_squared_error')\nlasso_cv_mse = -lasso_cv_scores.mean()\nprint(f'Cross-validated MSE: {lasso_cv_mse}')","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:10:37.784702Z","iopub.execute_input":"2024-08-23T00:10:37.785153Z","iopub.status.idle":"2024-08-23T00:10:39.389058Z","shell.execute_reply.started":"2024-08-23T00:10:37.785117Z","shell.execute_reply":"2024-08-23T00:10:39.387687Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_coordinate_descent.py:617: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.05044156624936136, tolerance: 0.01817880794701987\n  model = cd_fast.enet_coordinate_descent_gram(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_coordinate_descent.py:617: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.06786254546787518, tolerance: 0.018120000000000004\n  model = cd_fast.enet_coordinate_descent_gram(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_coordinate_descent.py:617: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.041714691522699354, tolerance: 0.01827152317880794\n  model = cd_fast.enet_coordinate_descent_gram(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_coordinate_descent.py:617: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.17334426787409996, tolerance: 0.01827152317880794\n  model = cd_fast.enet_coordinate_descent_gram(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_coordinate_descent.py:617: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.04043602213356223, tolerance: 0.018079470198675496\n  model = cd_fast.enet_coordinate_descent_gram(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_coordinate_descent.py:617: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.022402265775227193, tolerance: 0.018120000000000004\n  model = cd_fast.enet_coordinate_descent_gram(\n/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_coordinate_descent.py:617: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.3626572795325842, tolerance: 0.01807447089947089\n  model = cd_fast.enet_coordinate_descent_gram(\n","output_type":"stream"},{"name":"stdout","text":"Best alpha: 0.020235896477251564\nCross-validated MSE: 0.20488863480823052\n","output_type":"stream"}]},{"cell_type":"code","source":"# Lasso reduction \nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import Lasso, LassoCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import mean_squared_error\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Assign X and labels\nX = all_features_df.drop(columns=['label', 'sentence'])\ny = all_features_df['label']\n\n# Split in train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Feature standardisation\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Lasso train with the optimal alpha\nlasso = Lasso(alpha=best_alpha)\nlasso.fit(X_train_scaled, y_train)\n\n# Performance evaluation on test subdivision\ny_pred = lasso.predict(X_test_scaled)\nmse = mean_squared_error(y_test, y_pred)\nprint(f'Mean Squared Error: {mse}')\n\n# Get the coefficients from the Lasso model\nlasso_coefficients = lasso.coef_\n\n# Create a DataFrame to see the features with non-zero coefficients\nfeature_importance = pd.DataFrame({\n    'Feature': X.columns,\n    'Coefficient': lasso_coefficients\n})\n\n# Filter out the features with non-zero coefficients\nselected_features = feature_importance[feature_importance['Coefficient'] != 0]\n\nprint(f\"Selected Features: \\n{selected_features}\")\nprint(len(selected_features))\nselected_features = selected_features.sort_values(by='Coefficient', ascending=False)\nselected_features.head(100)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:10:44.522653Z","iopub.execute_input":"2024-08-23T00:10:44.523054Z","iopub.status.idle":"2024-08-23T00:10:44.623701Z","shell.execute_reply.started":"2024-08-23T00:10:44.523026Z","shell.execute_reply":"2024-08-23T00:10:44.622474Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Mean Squared Error: 0.1818386371469561\nSelected Features: \n                                           Feature  Coefficient\n1        average_subtlex_us_zipf_of_words_per_word     0.021181\n2                   total_number_of_named_entities    -0.040387\n3        average_number_of_named_entities_per_word    -0.024044\n6                    num_strong_subjectivity_clues     0.088792\n14                                      num_hedges    -0.001854\n24                       simple_numerals_variation    -0.025496\n25                      simple_particles_variation     0.001658\n27                   simple_proper_nouns_variation    -0.021416\n35   total_number_of_words_more_than_two_syllables     0.020984\n47                                     conditional     0.000498\n61                        total_number_of_pronouns     0.012888\n69              total_number_of_unique_auxiliaries     0.006523\n81           average_number_of_adjectives_per_word     0.002520\n83              average_number_of_adverbs_per_word     0.006946\n115                                           attr     0.007808\n132                                           oprd     0.025518\n135                                        preconj     0.007300\n136                                         predet     0.011836\n147                 path_dependency_compound_count    -0.014525\n151                    path_dependency_nsubj_count    -0.006110\n154                     path_dependency_prep_count    -0.006709\n160                 path_dependency_npadvmod_count     0.009078\n162                      path_dependency_dep_count     0.000011\n178                         num_reflexive_pronouns     0.012089\n197                    ratio_emotive_factive_verbs    -0.001720\n199                      ratio_positive_adjectives     0.006190\n200                        num_negative_adjectives     0.013216\n207                           ratio_positive_verbs     0.001268\n214                                        neutral    -0.019914\n217                                       optimism     0.000181\n218                                      confusion    -0.007999\n223                                         relief    -0.000964\n224                                        sadness    -0.016451\n225                                    disapproval     0.032391\n228                                       surprise     0.004177\n229                                      annoyance     0.008317\n231                                     admiration     0.007521\n246                                     num_modals     0.008683\n249                            num_epistemic_verbs    -0.020392\n250                          ratio_epistemic_verbs    -0.005025\n253                    pos_pattern_ADV ADJ notNOUN     0.003238\n255                   pos_pattern_NOUN ADJ notNOUN    -0.013294\n42\n","output_type":"stream"},{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"                                           Feature  Coefficient\n6                    num_strong_subjectivity_clues     0.088792\n225                                    disapproval     0.032391\n132                                           oprd     0.025518\n1        average_subtlex_us_zipf_of_words_per_word     0.021181\n35   total_number_of_words_more_than_two_syllables     0.020984\n200                        num_negative_adjectives     0.013216\n61                        total_number_of_pronouns     0.012888\n178                         num_reflexive_pronouns     0.012089\n136                                         predet     0.011836\n160                 path_dependency_npadvmod_count     0.009078\n246                                     num_modals     0.008683\n229                                      annoyance     0.008317\n115                                           attr     0.007808\n231                                     admiration     0.007521\n135                                        preconj     0.007300\n83              average_number_of_adverbs_per_word     0.006946\n69              total_number_of_unique_auxiliaries     0.006523\n199                      ratio_positive_adjectives     0.006190\n228                                       surprise     0.004177\n253                    pos_pattern_ADV ADJ notNOUN     0.003238\n81           average_number_of_adjectives_per_word     0.002520\n25                      simple_particles_variation     0.001658\n207                           ratio_positive_verbs     0.001268\n47                                     conditional     0.000498\n217                                       optimism     0.000181\n162                      path_dependency_dep_count     0.000011\n223                                         relief    -0.000964\n197                    ratio_emotive_factive_verbs    -0.001720\n14                                      num_hedges    -0.001854\n250                          ratio_epistemic_verbs    -0.005025\n151                    path_dependency_nsubj_count    -0.006110\n154                     path_dependency_prep_count    -0.006709\n218                                      confusion    -0.007999\n255                   pos_pattern_NOUN ADJ notNOUN    -0.013294\n147                 path_dependency_compound_count    -0.014525\n224                                        sadness    -0.016451\n214                                        neutral    -0.019914\n249                            num_epistemic_verbs    -0.020392\n27                   simple_proper_nouns_variation    -0.021416\n3        average_number_of_named_entities_per_word    -0.024044\n24                       simple_numerals_variation    -0.025496\n2                   total_number_of_named_entities    -0.040387","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Feature</th>\n      <th>Coefficient</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6</th>\n      <td>num_strong_subjectivity_clues</td>\n      <td>0.088792</td>\n    </tr>\n    <tr>\n      <th>225</th>\n      <td>disapproval</td>\n      <td>0.032391</td>\n    </tr>\n    <tr>\n      <th>132</th>\n      <td>oprd</td>\n      <td>0.025518</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>average_subtlex_us_zipf_of_words_per_word</td>\n      <td>0.021181</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>total_number_of_words_more_than_two_syllables</td>\n      <td>0.020984</td>\n    </tr>\n    <tr>\n      <th>200</th>\n      <td>num_negative_adjectives</td>\n      <td>0.013216</td>\n    </tr>\n    <tr>\n      <th>61</th>\n      <td>total_number_of_pronouns</td>\n      <td>0.012888</td>\n    </tr>\n    <tr>\n      <th>178</th>\n      <td>num_reflexive_pronouns</td>\n      <td>0.012089</td>\n    </tr>\n    <tr>\n      <th>136</th>\n      <td>predet</td>\n      <td>0.011836</td>\n    </tr>\n    <tr>\n      <th>160</th>\n      <td>path_dependency_npadvmod_count</td>\n      <td>0.009078</td>\n    </tr>\n    <tr>\n      <th>246</th>\n      <td>num_modals</td>\n      <td>0.008683</td>\n    </tr>\n    <tr>\n      <th>229</th>\n      <td>annoyance</td>\n      <td>0.008317</td>\n    </tr>\n    <tr>\n      <th>115</th>\n      <td>attr</td>\n      <td>0.007808</td>\n    </tr>\n    <tr>\n      <th>231</th>\n      <td>admiration</td>\n      <td>0.007521</td>\n    </tr>\n    <tr>\n      <th>135</th>\n      <td>preconj</td>\n      <td>0.007300</td>\n    </tr>\n    <tr>\n      <th>83</th>\n      <td>average_number_of_adverbs_per_word</td>\n      <td>0.006946</td>\n    </tr>\n    <tr>\n      <th>69</th>\n      <td>total_number_of_unique_auxiliaries</td>\n      <td>0.006523</td>\n    </tr>\n    <tr>\n      <th>199</th>\n      <td>ratio_positive_adjectives</td>\n      <td>0.006190</td>\n    </tr>\n    <tr>\n      <th>228</th>\n      <td>surprise</td>\n      <td>0.004177</td>\n    </tr>\n    <tr>\n      <th>253</th>\n      <td>pos_pattern_ADV ADJ notNOUN</td>\n      <td>0.003238</td>\n    </tr>\n    <tr>\n      <th>81</th>\n      <td>average_number_of_adjectives_per_word</td>\n      <td>0.002520</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>simple_particles_variation</td>\n      <td>0.001658</td>\n    </tr>\n    <tr>\n      <th>207</th>\n      <td>ratio_positive_verbs</td>\n      <td>0.001268</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>conditional</td>\n      <td>0.000498</td>\n    </tr>\n    <tr>\n      <th>217</th>\n      <td>optimism</td>\n      <td>0.000181</td>\n    </tr>\n    <tr>\n      <th>162</th>\n      <td>path_dependency_dep_count</td>\n      <td>0.000011</td>\n    </tr>\n    <tr>\n      <th>223</th>\n      <td>relief</td>\n      <td>-0.000964</td>\n    </tr>\n    <tr>\n      <th>197</th>\n      <td>ratio_emotive_factive_verbs</td>\n      <td>-0.001720</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>num_hedges</td>\n      <td>-0.001854</td>\n    </tr>\n    <tr>\n      <th>250</th>\n      <td>ratio_epistemic_verbs</td>\n      <td>-0.005025</td>\n    </tr>\n    <tr>\n      <th>151</th>\n      <td>path_dependency_nsubj_count</td>\n      <td>-0.006110</td>\n    </tr>\n    <tr>\n      <th>154</th>\n      <td>path_dependency_prep_count</td>\n      <td>-0.006709</td>\n    </tr>\n    <tr>\n      <th>218</th>\n      <td>confusion</td>\n      <td>-0.007999</td>\n    </tr>\n    <tr>\n      <th>255</th>\n      <td>pos_pattern_NOUN ADJ notNOUN</td>\n      <td>-0.013294</td>\n    </tr>\n    <tr>\n      <th>147</th>\n      <td>path_dependency_compound_count</td>\n      <td>-0.014525</td>\n    </tr>\n    <tr>\n      <th>224</th>\n      <td>sadness</td>\n      <td>-0.016451</td>\n    </tr>\n    <tr>\n      <th>214</th>\n      <td>neutral</td>\n      <td>-0.019914</td>\n    </tr>\n    <tr>\n      <th>249</th>\n      <td>num_epistemic_verbs</td>\n      <td>-0.020392</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>simple_proper_nouns_variation</td>\n      <td>-0.021416</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>average_number_of_named_entities_per_word</td>\n      <td>-0.024044</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>simple_numerals_variation</td>\n      <td>-0.025496</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>total_number_of_named_entities</td>\n      <td>-0.040387</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### After running LASSO with the adjusted alpha, it's time to rerun the pca on the significant features for the dataset","metadata":{}},{"cell_type":"code","source":"# Ensure no missing values\nall_features_df = all_features_df.fillna(0)\n\n# Filter out all unimportant features\nimportant_features_df = all_features_df[selected_features['Feature']]\n\n# Separate features and labels\nfeatures = important_features_df\nlabels = all_features_df['label']\n\n# Step 3: Standardize the data\nscaler = StandardScaler()\nscaled_features = scaler.fit_transform(features)\n\n# Step 4: Apply PCA\npca = PCA(n_components=2)  # Choosing 2 components for visualization purposes\nprincipal_components = pca.fit_transform(scaled_features)\n\n# Create a DataFrame with the principal components\npca_df = pd.DataFrame(data=principal_components, columns=['PC1', 'PC2'])\npca_df['label'] = labels.values  # Add labels to the PCA DataFrame\n\n# Print the explained variance ratio\nprint(\"Explained Variance Ratio:\", pca.explained_variance_ratio_)\n\n# Visualize the results with color coding\nplt.figure(figsize=(8, 6))\ncolors = {0: 'blue', 1: 'red'}\nplt.scatter(pca_df['PC1'], pca_df['PC2'], c=pca_df['label'].map(colors))\nplt.title('PCA of Reduced Features News')\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.legend(handles=[plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='blue', markersize=10, label='Objective (0)'),\n                    plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='red', markersize=10, label='Subjective (1)')])\nplt.savefig('pca_reduced_news.png')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-22T21:56:47.892780Z","iopub.execute_input":"2024-08-22T21:56:47.897299Z","iopub.status.idle":"2024-08-22T21:56:48.696876Z","shell.execute_reply.started":"2024-08-22T21:56:47.897220Z","shell.execute_reply":"2024-08-22T21:56:48.695163Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"Explained Variance Ratio: [0.08560887 0.06680989]\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"important_features_df = all_features_df[selected_features['Feature']]\nimportant_features_df.tail(100)\nX_important_features = important_features_df\n\n# Compute the correlation matrix\ncorrelation_matrix = X_important_features.corr()\n\n# print(correlation_matrix)\n\n# Plot the heatmap\nplt.figure(figsize=(12, 10))\nsns.heatmap(correlation_matrix, cmap='coolwarm', annot=False, vmin=-1, vmax=1)\nplt.title('Important Feature Correlation Matrix News')\nplt.savefig('reduced_correlation_matrix_news.png')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:25:13.149798Z","iopub.execute_input":"2024-08-23T00:25:13.151046Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Baseline Models Training\n\n### The first model is an SVM trained on tf-idf without the features","metadata":{}},{"cell_type":"code","source":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix\nfrom sklearn.model_selection import KFold\n\n\nsentences = news_df['sentence']\nlabels = news_df['label']\n\n# Vectorize the text using TF-IDF\ntfidf_vectorizer = TfidfVectorizer()\nX = tfidf_vectorizer.fit_transform(sentences)\n\n# Initialize K-Fold cross-validation with 5 folds\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\n# Lists to hold the evaluation metrics for each fold\naccuracy_list = []\nprecision_list = []\nrecall_list = []\nf1_list = []\nconf_matrix_list = []\n\n# Perform K-Fold cross-validation\nfor train_index, test_index in kf.split(X):\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = labels.iloc[train_index], labels.iloc[test_index]\n    \n    # Train SVM model\n    svm_model = SVC(kernel='linear', random_state=42)\n    svm_model.fit(X_train, y_train)\n    \n    # Predict and evaluate\n    y_pred = svm_model.predict(X_test)\n    \n    accuracy = accuracy_score(y_test, y_pred)\n    precision = precision_score(y_test, y_pred, average='weighted')\n    recall = recall_score(y_test, y_pred, average='weighted')\n    f1 = f1_score(y_test, y_pred, average='weighted')\n    \n    accuracy_list.append(accuracy)\n    precision_list.append(precision)\n    recall_list.append(recall)\n    f1_list.append(f1)\n    \n    # Compute confusion matrix\n    conf_matrix = confusion_matrix(y_test, y_pred)\n    conf_matrix_list.append(conf_matrix)\n\n# Calculate average metrics\navg_accuracy = np.mean(accuracy_list)\navg_precision = np.mean(precision_list)\navg_recall = np.mean(recall_list)\navg_f1 = np.mean(f1_list)\n\n# Calculate average confusion matrix from cross-validation\navg_conf_matrix = np.mean(conf_matrix_list, axis=0)\n\nprint(f'Average Accuracy: {avg_accuracy:.2f}')\nprint(f'Average Precision: {avg_precision:.2f}')\nprint(f'Average Recall: {avg_recall:.2f}')\nprint(f'Average F1 Score: {avg_f1:.2f}')\nprint('Average Confusion Matrix:')\nprint(avg_conf_matrix)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T21:56:50.708214Z","iopub.execute_input":"2024-08-22T21:56:50.708687Z","iopub.status.idle":"2024-08-22T21:56:51.828764Z","shell.execute_reply.started":"2024-08-22T21:56:50.708647Z","shell.execute_reply":"2024-08-22T21:56:51.827398Z"},"trusted":true},"execution_count":36,"outputs":[{"name":"stdout","text":"Average Accuracy: 0.68\nAverage Precision: 0.67\nAverage Recall: 0.68\nAverage F1 Score: 0.66\nAverage Confusion Matrix:\n[[106.2  21.4]\n [ 46.4  35.8]]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Second SVM model trained on all the features","metadata":{}},{"cell_type":"code","source":"# SVM trained on all the features\n\nfeatures = all_features_df.values\nlabels = news_df['label'].values\n\nX = all_features_df.drop(columns=['label', 'sentence'])\nX = X.values\n\n# Initialize K-Fold cross-validation with 5 folds\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\n# Lists to hold the evaluation metrics for each fold\naccuracy_list = []\nprecision_list = []\nrecall_list = []\nf1_list = []\nconf_matrix_list = []\n\n# Perform K-Fold cross-validation\nfor train_index, test_index in kf.split(features):\n    X_train, X_test = X[train_index], X[test_index]\n    y_train, y_test = labels[train_index], labels[test_index]\n    \n    # Train SVM model\n    svm_model = SVC(kernel='linear', random_state=42)\n    svm_model.fit(X_train, y_train)\n    \n    # Predict and evaluate\n    y_pred = svm_model.predict(X_test)\n    \n    accuracy = accuracy_score(y_test, y_pred)\n    precision = precision_score(y_test, y_pred, average='weighted')\n    recall = recall_score(y_test, y_pred, average='weighted')\n    f1 = f1_score(y_test, y_pred, average='weighted')\n    \n    accuracy_list.append(accuracy)\n    precision_list.append(precision)\n    recall_list.append(recall)\n    f1_list.append(f1)\n    \n    # Compute confusion matrix\n    conf_matrix = confusion_matrix(y_test, y_pred)\n    conf_matrix_list.append(conf_matrix)\n\n# Calculate average metrics\navg_accuracy = np.mean(accuracy_list)\navg_precision = np.mean(precision_list)\navg_recall = np.mean(recall_list)\navg_f1 = np.mean(f1_list)\n\n# Calculate average confusion matrix from cross-validation\navg_conf_matrix = np.mean(conf_matrix_list, axis=0)\n\nprint(f'Average Accuracy: {avg_accuracy:.2f}')\nprint(f'Average Precision: {avg_precision:.2f}')\nprint(f'Average Recall: {avg_recall:.2f}')\nprint(f'Average F1 Score: {avg_f1:.2f}')\nprint('Average Confusion Matrix:')\nprint(avg_conf_matrix)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T21:56:51.830158Z","iopub.execute_input":"2024-08-22T21:56:51.830558Z","iopub.status.idle":"2024-08-22T21:56:58.813130Z","shell.execute_reply.started":"2024-08-22T21:56:51.830521Z","shell.execute_reply":"2024-08-22T21:56:58.811887Z"},"trusted":true},"execution_count":37,"outputs":[{"name":"stdout","text":"Average Accuracy: 0.62\nAverage Precision: 0.62\nAverage Recall: 0.62\nAverage F1 Score: 0.62\nAverage Confusion Matrix:\n[[90.4 37.2]\n [41.6 40.6]]\n","output_type":"stream"}]},{"cell_type":"code","source":"# logistic regression\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\n\nfeatures = all_features_df.drop(columns=['label', 'sentence'])\nfeatures = features.values\nlabels = news_df['label'].values\n\n# Train-Test Split\nX_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)\n\n# Standardize Features\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Initialize Logistic Regression Model with increased iterations and scaling\nlog_reg_model = LogisticRegression(max_iter=2000, solver='lbfgs', random_state=42)\n\n# Train the Model\nlog_reg_model.fit(X_train_scaled, y_train)\n\n# Make Predictions\ny_pred = log_reg_model.predict(X_test_scaled)\n\n# Evaluate the Model\naccuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred, average='weighted')\nrecall = recall_score(y_test, y_pred, average='weighted')\nf1 = f1_score(y_test, y_pred, average='weighted')\nconf_matrix = confusion_matrix(y_test, y_pred)\n\nprint(f'Accuracy: {accuracy:.2f}')\nprint(f'Precision: {precision:.2f}')\nprint(f'Recall: {recall:.2f}')\nprint(f'F1 Score: {f1:.2f}')\nprint('Confusion Matrix:')\nprint(conf_matrix)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-22T21:56:58.818511Z","iopub.execute_input":"2024-08-22T21:56:58.818959Z","iopub.status.idle":"2024-08-22T21:56:58.980066Z","shell.execute_reply.started":"2024-08-22T21:56:58.818924Z","shell.execute_reply":"2024-08-22T21:56:58.978476Z"},"trusted":true},"execution_count":38,"outputs":[{"name":"stdout","text":"Accuracy: 0.65\nPrecision: 0.65\nRecall: 0.65\nF1 Score: 0.65\nConfusion Matrix:\n[[97 38]\n [36 39]]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Third SVM model trained on the LASSO designated important features","metadata":{}},{"cell_type":"code","source":"# SVM trained on all the important features\nfeatures = important_features_df.values\nlabels = news_df['label'].values\n\nX = features\n\n# Initialize K-Fold cross-validation with 5 folds\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\n# Lists to hold the evaluation metrics for each fold\naccuracy_list = []\nprecision_list = []\nrecall_list = []\nf1_list = []\n\n# Perform K-Fold cross-validation\nfor train_index, test_index in kf.split(features):\n    X_train, X_test = features[train_index], features[test_index]\n    y_train, y_test = labels[train_index], labels[test_index]\n    \n    # Train SVM model\n    svm_model = SVC(kernel='linear', random_state=42)\n    svm_model.fit(X_train, y_train)\n    \n    # Predict and evaluate\n    y_pred = svm_model.predict(X_test)\n    \n    accuracy = accuracy_score(y_test, y_pred)\n    precision = precision_score(y_test, y_pred, average='weighted')\n    recall = recall_score(y_test, y_pred, average='weighted')\n    f1 = f1_score(y_test, y_pred, average='weighted')\n    \n    accuracy_list.append(accuracy)\n    precision_list.append(precision)\n    recall_list.append(recall)\n    f1_list.append(f1)\n\n# Calculate average metrics\navg_accuracy = np.mean(accuracy_list)\navg_precision = np.mean(precision_list)\navg_recall = np.mean(recall_list)\navg_f1 = np.mean(f1_list)\n\nprint(f'Average Accuracy: {avg_accuracy:.2f}')\nprint(f'Average Precision: {avg_precision:.2f}')\nprint(f'Average Recall: {avg_recall:.2f}')\nprint(f'Average F1 Score: {avg_f1:.2f}')","metadata":{"execution":{"iopub.status.busy":"2024-08-22T21:56:58.982537Z","iopub.execute_input":"2024-08-22T21:56:58.983605Z","iopub.status.idle":"2024-08-22T21:56:59.572140Z","shell.execute_reply.started":"2024-08-22T21:56:58.983525Z","shell.execute_reply":"2024-08-22T21:56:59.570665Z"},"trusted":true},"execution_count":39,"outputs":[{"name":"stdout","text":"Average Accuracy: 0.69\nAverage Precision: 0.68\nAverage Recall: 0.69\nAverage F1 Score: 0.68\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n\n\nfeatures = important_features_df.values\nfeature_names = important_features_df.columns\nlabels = news_df['label'].values\n\n# Initialize K-Fold cross-validation with 5 folds\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\n# Lists to hold the evaluation metrics for each fold\naccuracy_list = []\nprecision_list = []\nrecall_list = []\nf1_list = []\n\n# List to hold feature importances for each fold\nfeature_importance_list = []\n\n# Perform K-Fold cross-validation\nfor train_index, test_index in kf.split(features):\n    X_train, X_test = features[train_index], features[test_index]\n    y_train, y_test = labels[train_index], labels[test_index]\n    \n    # Train SVM model\n    svm_model = SVC(kernel='linear', random_state=42)\n    svm_model.fit(X_train, y_train)\n    \n    # Predict and evaluate\n    y_pred = svm_model.predict(X_test)\n    \n    accuracy = accuracy_score(y_test, y_pred)\n    precision = precision_score(y_test, y_pred, average='weighted')\n    recall = recall_score(y_test, y_pred, average='weighted')\n    f1 = f1_score(y_test, y_pred, average='weighted')\n    \n    accuracy_list.append(accuracy)\n    precision_list.append(precision)\n    recall_list.append(recall)\n    f1_list.append(f1)\n    \n    # Extract feature importances (coefficients) and add them to the list\n    feature_importance_list.append(svm_model.coef_[0])\n\n# Calculate average metrics\navg_accuracy = np.mean(accuracy_list)\navg_precision = np.mean(precision_list)\navg_recall = np.mean(recall_list)\navg_f1 = np.mean(f1_list)\n\nprint(f'Average Accuracy: {avg_accuracy:.2f}')\nprint(f'Average Precision: {avg_precision:.2f}')\nprint(f'Average Recall: {avg_recall:.2f}')\nprint(f'Average F1 Score: {avg_f1:.2f}\\n')\n\n# Calculate average feature importances across folds\navg_feature_importance = np.mean(feature_importance_list, axis=0)\n\n# Create a DataFrame to hold feature names and their importances\nfeature_importance_df = pd.DataFrame({\n    'feature': feature_names,\n    'importance': avg_feature_importance\n})\n\n# Sort features by their absolute importance\nfeature_importance_df['abs_importance'] = feature_importance_df['importance'].abs()\nfeature_importance_df = feature_importance_df.sort_values(by='abs_importance', ascending=False)\n\nprint(\"Top Important Features:\")\nfeature_importance_df[['feature', 'importance']].head(10)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-22T21:56:59.573998Z","iopub.execute_input":"2024-08-22T21:56:59.574416Z","iopub.status.idle":"2024-08-22T21:57:00.436390Z","shell.execute_reply.started":"2024-08-22T21:56:59.574371Z","shell.execute_reply":"2024-08-22T21:57:00.434547Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"Average Accuracy: 0.69\nAverage Precision: 0.68\nAverage Recall: 0.69\nAverage F1 Score: 0.68\n\nTop Important Features:\n","output_type":"stream"},{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"                                          feature  importance\n33                   pos_pattern_NOUN ADJ notNOUN   -0.459081\n26                                         relief   -0.424907\n0                   num_strong_subjectivity_clues    0.422486\n41                 total_number_of_named_entities   -0.407530\n4   total_number_of_words_more_than_two_syllables    0.239216\n2                                            oprd    0.220742\n36                                        neutral   -0.190013\n37                            num_epistemic_verbs   -0.187671\n31                     path_dependency_prep_count   -0.180606\n32                                      confusion   -0.177567","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>feature</th>\n      <th>importance</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>33</th>\n      <td>pos_pattern_NOUN ADJ notNOUN</td>\n      <td>-0.459081</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>relief</td>\n      <td>-0.424907</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>num_strong_subjectivity_clues</td>\n      <td>0.422486</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>total_number_of_named_entities</td>\n      <td>-0.407530</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>total_number_of_words_more_than_two_syllables</td>\n      <td>0.239216</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>oprd</td>\n      <td>0.220742</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>neutral</td>\n      <td>-0.190013</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>num_epistemic_verbs</td>\n      <td>-0.187671</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>path_dependency_prep_count</td>\n      <td>-0.180606</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>confusion</td>\n      <td>-0.177567</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### SVM models per feature category","metadata":{}},{"cell_type":"code","source":"# SVM trained on Lexical features\nfeatures = lexical_df.values\nlabels = news_df['label'].values\n\nX = features\n\n# Initialize K-Fold cross-validation with 5 folds\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\n# Lists to hold the evaluation metrics for each fold\naccuracy_list = []\nprecision_list = []\nrecall_list = []\nf1_list = []\n\n# Perform K-Fold cross-validation\nfor train_index, test_index in kf.split(features):\n    X_train, X_test = features[train_index], features[test_index]\n    y_train, y_test = labels[train_index], labels[test_index]\n    \n    # Train SVM model\n    svm_model = SVC(kernel='linear', random_state=42)\n    svm_model.fit(X_train, y_train)\n    \n    # Predict and evaluate\n    y_pred = svm_model.predict(X_test)\n    \n    accuracy = accuracy_score(y_test, y_pred)\n    precision = precision_score(y_test, y_pred, average='weighted')\n    recall = recall_score(y_test, y_pred, average='weighted')\n    f1 = f1_score(y_test, y_pred, average='weighted')\n    \n    accuracy_list.append(accuracy)\n    precision_list.append(precision)\n    recall_list.append(recall)\n    f1_list.append(f1)\n\n# Calculate average metrics\navg_accuracy = np.mean(accuracy_list)\navg_precision = np.mean(precision_list)\navg_recall = np.mean(recall_list)\navg_f1 = np.mean(f1_list)\n\nprint('Lexical Features')\nprint(f'Average Accuracy: {avg_accuracy:.2f}')\nprint(f'Average Precision: {avg_precision:.2f}')\nprint(f'Average Recall: {avg_recall:.2f}')\nprint(f'Average F1 Score: {avg_f1:.2f}')\n\n# SVM trained on Syntactic features\nfeatures = syntactic_df.values\nlabels = news_df['label'].values\n\nX = features\n\n# Initialize K-Fold cross-validation with 5 folds\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\n# Lists to hold the evaluation metrics for each fold\naccuracy_list = []\nprecision_list = []\nrecall_list = []\nf1_list = []\n\n# Perform K-Fold cross-validation\nfor train_index, test_index in kf.split(features):\n    X_train, X_test = features[train_index], features[test_index]\n    y_train, y_test = labels[train_index], labels[test_index]\n    \n    # Train SVM model\n    svm_model = SVC(kernel='linear', random_state=42)\n    svm_model.fit(X_train, y_train)\n    \n    # Predict and evaluate\n    y_pred = svm_model.predict(X_test)\n    \n    accuracy = accuracy_score(y_test, y_pred)\n    precision = precision_score(y_test, y_pred, average='weighted')\n    recall = recall_score(y_test, y_pred, average='weighted')\n    f1 = f1_score(y_test, y_pred, average='weighted')\n    \n    accuracy_list.append(accuracy)\n    precision_list.append(precision)\n    recall_list.append(recall)\n    f1_list.append(f1)\n\n# Calculate average metrics\navg_accuracy = np.mean(accuracy_list)\navg_precision = np.mean(precision_list)\navg_recall = np.mean(recall_list)\navg_f1 = np.mean(f1_list)\n\nprint('Syntactic Features')\nprint(f'Average Accuracy: {avg_accuracy:.2f}')\nprint(f'Average Precision: {avg_precision:.2f}')\nprint(f'Average Recall: {avg_recall:.2f}')\nprint(f'Average F1 Score: {avg_f1:.2f}')\n\n# SVM trained on Structural features\nfeatures = structural_df.values\nlabels = news_df['label'].values\n\nX = features\n\n# Initialize K-Fold cross-validation with 5 folds\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\n# Lists to hold the evaluation metrics for each fold\naccuracy_list = []\nprecision_list = []\nrecall_list = []\nf1_list = []\n\n# Perform K-Fold cross-validation\nfor train_index, test_index in kf.split(features):\n    X_train, X_test = features[train_index], features[test_index]\n    y_train, y_test = labels[train_index], labels[test_index]\n    \n    # Train SVM model\n    svm_model = SVC(kernel='linear', random_state=42)\n    svm_model.fit(X_train, y_train)\n    \n    # Predict and evaluate\n    y_pred = svm_model.predict(X_test)\n    \n    accuracy = accuracy_score(y_test, y_pred)\n    precision = precision_score(y_test, y_pred, average='weighted')\n    recall = recall_score(y_test, y_pred, average='weighted')\n    f1 = f1_score(y_test, y_pred, average='weighted')\n    \n    accuracy_list.append(accuracy)\n    precision_list.append(precision)\n    recall_list.append(recall)\n    f1_list.append(f1)\n\n# Calculate average metrics\navg_accuracy = np.mean(accuracy_list)\navg_precision = np.mean(precision_list)\navg_recall = np.mean(recall_list)\navg_f1 = np.mean(f1_list)\n\nprint('Structural Features')\nprint(f'Average Accuracy: {avg_accuracy:.2f}')\nprint(f'Average Precision: {avg_precision:.2f}')\nprint(f'Average Recall: {avg_recall:.2f}')\nprint(f'Average F1 Score: {avg_f1:.2f}')\n\n# SVM trained on Affect features\nfeatures = affect_df.values\nlabels = news_df['label'].values\n\nX = features\n\n# Initialize K-Fold cross-validation with 5 folds\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\n# Lists to hold the evaluation metrics for each fold\naccuracy_list = []\nprecision_list = []\nrecall_list = []\nf1_list = []\n\n# Perform K-Fold cross-validation\nfor train_index, test_index in kf.split(features):\n    X_train, X_test = features[train_index], features[test_index]\n    y_train, y_test = labels[train_index], labels[test_index]\n    \n    # Train SVM model\n    svm_model = SVC(kernel='linear', random_state=42)\n    svm_model.fit(X_train, y_train)\n    \n    # Predict and evaluate\n    y_pred = svm_model.predict(X_test)\n    \n    accuracy = accuracy_score(y_test, y_pred)\n    precision = precision_score(y_test, y_pred, average='weighted')\n    recall = recall_score(y_test, y_pred, average='weighted')\n    f1 = f1_score(y_test, y_pred, average='weighted')\n    \n    accuracy_list.append(accuracy)\n    precision_list.append(precision)\n    recall_list.append(recall)\n    f1_list.append(f1)\n\n# Calculate average metrics\navg_accuracy = np.mean(accuracy_list)\navg_precision = np.mean(precision_list)\navg_recall = np.mean(recall_list)\navg_f1 = np.mean(f1_list)\n\nprint('Affect Features')\nprint(f'Average Accuracy: {avg_accuracy:.2f}')\nprint(f'Average Precision: {avg_precision:.2f}')\nprint(f'Average Recall: {avg_recall:.2f}')\nprint(f'Average F1 Score: {avg_f1:.2f}')\n\n# SVM trained on Epistemic Status features\nfeatures = epistemic_status_df.values\nlabels = news_df['label'].values\n\nX = features\n\n# Initialize K-Fold cross-validation with 5 folds\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\n# Lists to hold the evaluation metrics for each fold\naccuracy_list = []\nprecision_list = []\nrecall_list = []\nf1_list = []\n\n# Perform K-Fold cross-validation\nfor train_index, test_index in kf.split(features):\n    X_train, X_test = features[train_index], features[test_index]\n    y_train, y_test = labels[train_index], labels[test_index]\n    \n    # Train SVM model\n    svm_model = SVC(kernel='linear', random_state=42)\n    svm_model.fit(X_train, y_train)\n    \n    # Predict and evaluate\n    y_pred = svm_model.predict(X_test)\n    \n    accuracy = accuracy_score(y_test, y_pred)\n    precision = precision_score(y_test, y_pred, average='weighted')\n    recall = recall_score(y_test, y_pred, average='weighted')\n    f1 = f1_score(y_test, y_pred, average='weighted')\n    \n    accuracy_list.append(accuracy)\n    precision_list.append(precision)\n    recall_list.append(recall)\n    f1_list.append(f1)\n\n# Calculate average metrics\navg_accuracy = np.mean(accuracy_list)\navg_precision = np.mean(precision_list)\navg_recall = np.mean(recall_list)\navg_f1 = np.mean(f1_list)\n\nprint('Epistemic Status Features')\nprint(f'Average Accuracy: {avg_accuracy:.2f}')\nprint(f'Average Precision: {avg_precision:.2f}')\nprint(f'Average Recall: {avg_recall:.2f}')\nprint(f'Average F1 Score: {avg_f1:.2f}')\n\n# SVM trained on Perspective features\nfeatures = perspective_df.values\nlabels = news_df['label'].values\n\nX = features\n\n# Initialize K-Fold cross-validation with 5 folds\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\n# Lists to hold the evaluation metrics for each fold\naccuracy_list = []\nprecision_list = []\nrecall_list = []\nf1_list = []\n\n# Perform K-Fold cross-validation\nfor train_index, test_index in kf.split(features):\n    X_train, X_test = features[train_index], features[test_index]\n    y_train, y_test = labels[train_index], labels[test_index]\n    \n    # Train SVM model\n    svm_model = SVC(kernel='linear', random_state=42)\n    svm_model.fit(X_train, y_train)\n    \n    # Predict and evaluate\n    y_pred = svm_model.predict(X_test)\n    \n    accuracy = accuracy_score(y_test, y_pred)\n    precision = precision_score(y_test, y_pred, average='weighted')\n    recall = recall_score(y_test, y_pred, average='weighted')\n    f1 = f1_score(y_test, y_pred, average='weighted')\n    \n    accuracy_list.append(accuracy)\n    precision_list.append(precision)\n    recall_list.append(recall)\n    f1_list.append(f1)\n\n# Calculate average metrics\navg_accuracy = np.mean(accuracy_list)\navg_precision = np.mean(precision_list)\navg_recall = np.mean(recall_list)\navg_f1 = np.mean(f1_list)\n\nprint('Perspective Features')\nprint(f'Average Accuracy: {avg_accuracy:.2f}')\nprint(f'Average Precision: {avg_precision:.2f}')\nprint(f'Average Recall: {avg_recall:.2f}')\nprint(f'Average F1 Score: {avg_f1:.2f}')","metadata":{"execution":{"iopub.status.busy":"2024-08-22T21:57:00.439349Z","iopub.execute_input":"2024-08-22T21:57:00.440658Z","iopub.status.idle":"2024-08-22T21:57:22.378956Z","shell.execute_reply.started":"2024-08-22T21:57:00.440604Z","shell.execute_reply":"2024-08-22T21:57:22.377524Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"Lexical Features\nAverage Accuracy: 0.66\nAverage Precision: 0.65\nAverage Recall: 0.66\nAverage F1 Score: 0.65\nSyntactic Features\nAverage Accuracy: 0.63\nAverage Precision: 0.62\nAverage Recall: 0.63\nAverage F1 Score: 0.61\nStructural Features\nAverage Accuracy: 0.62\nAverage Precision: 0.60\nAverage Recall: 0.62\nAverage F1 Score: 0.57\nAffect Features\nAverage Accuracy: 0.65\nAverage Precision: 0.64\nAverage Recall: 0.65\nAverage F1 Score: 0.62\nEpistemic Status Features\nAverage Accuracy: 0.60\nAverage Precision: 0.55\nAverage Recall: 0.60\nAverage F1 Score: 0.49\nPerspective Features\nAverage Accuracy: 0.60\nAverage Precision: 0.57\nAverage Recall: 0.60\nAverage F1 Score: 0.50\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## BERT\n### Acquisition of Bert sentence embeddings","metadata":{}},{"cell_type":"code","source":"# import torch\n# from transformers import BertTokenizer, BertModel\n\n# # Set random seeds for reproducibility\n# torch.manual_seed(42)\n# np.random.seed(42)\n\n# # Load pre-trained BERT model and tokenizer\n# model_name = 'bert-base-uncased'\n# tokenizer = BertTokenizer.from_pretrained(model_name)\n# model = BertModel.from_pretrained(model_name)\n\n# # Ensure the model is in evaluation mode\n# model.eval()\n\n# # Sample dataset (replace with your actual dataset)\n# sentences = news_df['sentence']\n\n# # Function to get BERT embeddings for a sentence\n# def get_sentence_embedding(sentence):\n#     # Tokenize the input sentence and get input IDs and attention mask\n#     inputs = tokenizer(sentence, return_tensors='pt', truncation=True, padding=True)\n    \n#     # Get the output from BERT\n#     with torch.no_grad():\n#         outputs = model(**inputs)\n    \n#     # The last hidden state is at index 0\n#     # Taking the mean of the last hidden state across the token dimension to get sentence embedding\n#     sentence_embedding = outputs.last_hidden_state.mean(dim=1).squeeze().numpy()\n    \n#     return sentence_embedding\n\n# # Compute embeddings for all sentences\n# sentence_embeddings = [get_sentence_embedding(sentence) for sentence in sentences]\n\n\n# # If you want to convert the list of embeddings to a DataFrame (e.g., if using pandas)\n# import pandas as pd\n# bert_embedding_df = pd.DataFrame(sentence_embeddings)\n# bert_embedding_df.to_csv('bert_embeddings_news.csv')\n# bert_embedding_df.tail()","metadata":{"execution":{"iopub.status.busy":"2024-08-22T21:57:22.380420Z","iopub.execute_input":"2024-08-22T21:57:22.380883Z","iopub.status.idle":"2024-08-22T21:57:22.387783Z","shell.execute_reply.started":"2024-08-22T21:57:22.380848Z","shell.execute_reply":"2024-08-22T21:57:22.386321Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"markdown","source":"### Training of an SVM on Bert sentence embeddings","metadata":{}},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.model_selection import KFold\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix\n\nbert_embedding_df = pd.read_csv('/kaggle/input/bert-embeddings-news/bert_embeddings_news.csv')\n\n# Ensure that bert_embedding_df and labels are in the correct format\nbert_embeddings = bert_embedding_df.values\nlabels = news_df['label'].values\n\n# Initialize K-Fold cross-validation with 5 folds\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\n# Lists to hold the evaluation metrics for each fold\naccuracy_list = []\nprecision_list = []\nrecall_list = []\nf1_list = []\nconf_matrix_list = []\nmispred_indices = []\n\nfor train_index, test_index in kf.split(bert_embeddings):\n    X_train, X_test = bert_embeddings[train_index], bert_embeddings[test_index]\n    y_train, y_test = labels[train_index], labels[test_index]\n    \n    svm_model = SVC(kernel='linear', random_state=42)\n    svm_model.fit(X_train, y_train)\n    \n    y_pred = svm_model.predict(X_test)\n    \n    mispred_indices.extend(test_index[y_test != y_pred])\n    \n    accuracy = accuracy_score(y_test, y_pred)\n    precision = precision_score(y_test, y_pred)\n    recall = recall_score(y_test, y_pred)\n    f1 = f1_score(y_test, y_pred)\n    conf_matrix = confusion_matrix(y_test, y_pred)\n    \n    accuracy_list.append(accuracy)\n    precision_list.append(precision)\n    recall_list.append(recall)\n    f1_list.append(f1)\n    conf_matrix_list.append(conf_matrix)\n\n# Collect mispredictions\nmispred_sentences = news_df.iloc[mispred_indices]['sentence'].tolist()\nmispred_labels = labels[mispred_indices]\n\nbert_mispredictions_df = pd.DataFrame(mispred_sentences)\nbert_mispredictions_df['original_indices'] = mispred_indices\nbert_mispredictions_df['original_labels'] = mispred_labels\nbert_mispredictions_df['mispredicted_sentences'] = bert_mispredictions_df[0]\nbert_mispredictions_df = bert_mispredictions_df.drop(columns=[0])\n\n# Calculate average metrics\navg_accuracy = np.mean(accuracy_list)\navg_precision = np.mean(precision_list)\navg_recall = np.mean(recall_list)\navg_f1 = np.mean(f1_list)\navg_conf_matrix = np.mean(conf_matrix_list, axis=0)\n\nprint('Bert Embeddings')\nprint(f'Average Accuracy: {avg_accuracy:.2f}')\nprint(f'Average Precision: {avg_precision:.2f}')\nprint(f'Average Recall: {avg_recall:.2f}')\nprint(f'Average F1 Score: {avg_f1:.2f}')\nprint('Average Confusion Matrix:')\nprint(avg_conf_matrix)\n\nbert_mispredictions_df.to_csv('bert_mispredictions_news.csv')\nbert_mispredictions_df.tail(100)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:11:26.834581Z","iopub.execute_input":"2024-08-23T00:11:26.834985Z","iopub.status.idle":"2024-08-23T00:16:06.118816Z","shell.execute_reply.started":"2024-08-23T00:11:26.834950Z","shell.execute_reply":"2024-08-23T00:16:06.117500Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"Bert Embeddings\nAverage Accuracy: 0.73\nAverage Precision: 0.66\nAverage Recall: 0.66\nAverage F1 Score: 0.66\nAverage Confusion Matrix:\n[[99.6 28. ]\n [28.  54.2]]\n","output_type":"stream"},{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"     original_indices  original_labels  \\\n180               496                0   \n181               509                0   \n182               515                0   \n183               609                1   \n184               610                1   \n..                ...              ...   \n275              1039                1   \n276              1041                1   \n277              1042                0   \n278              1044                1   \n279              1047                1   \n\n                                mispredicted_sentences  \n180   Some politicians came forward to back them up.\\n  \n181  New Mexico has become the latest state to welc...  \n182  (DACA is then-President Barack Obama’s Deferre...  \n183  An indebted state-owned bus company in Lanzhou...  \n184  Thanks to its deep property slump and the gove...  \n..                                                 ...  \n275  The single issue that overcame all others: Mr....  \n276  In this capacity, he is editor and publisher o...  \n277  [JF: Dr. John Tanton was, of course, the great...  \n278  A lot of subsequent unpleasantness could have ...  \n279           But in fact it was intensely rational.\\n  \n\n[100 rows x 3 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>original_indices</th>\n      <th>original_labels</th>\n      <th>mispredicted_sentences</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>180</th>\n      <td>496</td>\n      <td>0</td>\n      <td>Some politicians came forward to back them up.\\n</td>\n    </tr>\n    <tr>\n      <th>181</th>\n      <td>509</td>\n      <td>0</td>\n      <td>New Mexico has become the latest state to welc...</td>\n    </tr>\n    <tr>\n      <th>182</th>\n      <td>515</td>\n      <td>0</td>\n      <td>(DACA is then-President Barack Obama’s Deferre...</td>\n    </tr>\n    <tr>\n      <th>183</th>\n      <td>609</td>\n      <td>1</td>\n      <td>An indebted state-owned bus company in Lanzhou...</td>\n    </tr>\n    <tr>\n      <th>184</th>\n      <td>610</td>\n      <td>1</td>\n      <td>Thanks to its deep property slump and the gove...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>275</th>\n      <td>1039</td>\n      <td>1</td>\n      <td>The single issue that overcame all others: Mr....</td>\n    </tr>\n    <tr>\n      <th>276</th>\n      <td>1041</td>\n      <td>1</td>\n      <td>In this capacity, he is editor and publisher o...</td>\n    </tr>\n    <tr>\n      <th>277</th>\n      <td>1042</td>\n      <td>0</td>\n      <td>[JF: Dr. John Tanton was, of course, the great...</td>\n    </tr>\n    <tr>\n      <th>278</th>\n      <td>1044</td>\n      <td>1</td>\n      <td>A lot of subsequent unpleasantness could have ...</td>\n    </tr>\n    <tr>\n      <th>279</th>\n      <td>1047</td>\n      <td>1</td>\n      <td>But in fact it was intensely rational.\\n</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows × 3 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Mapping of the mispredictions of Bert to the linguistic features","metadata":{}},{"cell_type":"code","source":"# Collect mispredictions\nmispred_sentences = news_df.iloc[mispred_indices]['sentence'].tolist()\nmispred_labels = labels[mispred_indices]\n\n# Map misprediction indices to the original features\nmispred_features_df = important_features_df.iloc[mispred_indices]\n\n# Display mispredicted features\nmispred_features_df.tail(1000)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:25:33.209237Z","iopub.execute_input":"2024-08-23T00:25:33.210269Z","iopub.status.idle":"2024-08-23T00:25:33.242608Z","shell.execute_reply.started":"2024-08-23T00:25:33.210222Z","shell.execute_reply":"2024-08-23T00:25:33.241351Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"      num_strong_subjectivity_clues  disapproval      oprd  \\\n3                          0.640697    -0.402953 -0.174505   \n31                        -0.130935     0.078973 -0.174505   \n44                         0.640697     0.178055 -0.174505   \n63                         1.412328    -0.268673 -0.174505   \n78                        -0.130935    -0.317988 -0.174505   \n...                             ...          ...       ...   \n1039                       0.640697    -0.325288 -0.174505   \n1041                      -0.902566    -0.371350 -0.174505   \n1042                       2.183960    -0.315399 -0.174505   \n1044                      -0.902566    -0.349364 -0.174505   \n1047                       0.640697    -0.376278 -0.174505   \n\n      average_subtlex_us_zipf_of_words_per_word  \\\n3                                      0.827470   \n31                                     1.017411   \n44                                     0.402897   \n63                                     0.710952   \n78                                     0.808317   \n...                                         ...   \n1039                                  -1.277839   \n1041                                   0.211360   \n1042                                  -0.866035   \n1044                                   0.212956   \n1047                                   0.158687   \n\n      total_number_of_words_more_than_two_syllables  num_negative_adjectives  \\\n3                                         -0.993872                -0.557049   \n31                                        -0.993872                -0.557049   \n44                                        -0.027633                 2.455037   \n63                                         0.294446                 0.948994   \n78                                        -0.671792                 0.948994   \n...                                             ...                      ...   \n1039                                      -0.027633                -0.557049   \n1041                                       1.582765                -0.557049   \n1042                                       0.616526                -0.557049   \n1044                                       2.549004                -0.557049   \n1047                                      -0.671792                -0.557049   \n\n      total_number_of_pronouns  num_reflexive_pronouns    predet  \\\n3                     0.368267               -0.198344 -0.159337   \n31                   -0.304751               -0.198344 -0.159337   \n44                   -0.977768               -0.198344 -0.159337   \n63                    1.041285               -0.198344 -0.159337   \n78                   -0.304751               -0.198344 -0.159337   \n...                        ...                     ...       ...   \n1039                 -0.304751               -0.198344 -0.159337   \n1041                  0.368267               -0.198344 -0.159337   \n1042                 -0.304751               -0.198344 -0.159337   \n1044                 -0.304751               -0.198344 -0.159337   \n1047                 -0.304751               -0.198344 -0.159337   \n\n      path_dependency_npadvmod_count  ...  confusion  \\\n3                          -0.168616  ...  -0.291545   \n31                         -0.168616  ...  -0.267596   \n44                         -0.168616  ...   1.989689   \n63                         -0.168616  ...  -0.255401   \n78                         -0.168616  ...   0.660068   \n...                              ...  ...        ...   \n1039                       -0.168616  ...  -0.283811   \n1041                       -0.168616  ...  -0.281731   \n1042                       -0.168616  ...  -0.277773   \n1044                       -0.168616  ...  -0.243510   \n1047                       -0.168616  ...  -0.271270   \n\n      pos_pattern_NOUN ADJ notNOUN  path_dependency_compound_count   sadness  \\\n3                                0                        0.623345 -0.227810   \n31                               0                        0.623345 -0.172228   \n44                               0                        1.724169 -0.203338   \n63                               0                        0.623345 -0.195350   \n78                               0                       -0.477478  0.644958   \n...                            ...                             ...       ...   \n1039                             0                       -0.477478 -0.211977   \n1041                             0                       -0.477478 -0.219041   \n1042                             0                       -0.477478 -0.189569   \n1044                             0                       -0.477478 -0.125412   \n1047                             0                       -0.477478 -0.233355   \n\n       neutral  num_epistemic_verbs  simple_proper_nouns_variation  \\\n3     0.165938            -0.587089                      -0.968539   \n31    0.600361            -0.587089                       1.058955   \n44   -0.695825            -0.587089                      -0.968539   \n63    0.297840            -0.587089                       1.058955   \n78   -0.794606            -0.587089                      -0.968539   \n...        ...                  ...                            ...   \n1039  0.821538            -0.587089                       1.058955   \n1041  0.841377            -0.587089                       1.058955   \n1042  0.367569            -0.587089                       1.058955   \n1044  0.730843            -0.587089                       1.058955   \n1047 -1.004001            -0.587089                      -0.968539   \n\n      average_number_of_named_entities_per_word  simple_numerals_variation  \\\n3                                     -0.877088                  -0.554669   \n31                                    -0.078466                  -0.554669   \n44                                    -0.877088                  -0.554669   \n63                                    -0.451157                  -0.554669   \n78                                    -0.113961                  -0.554669   \n...                                         ...                        ...   \n1039                                   0.223235                  -0.554669   \n1041                                   0.489443                  -0.554669   \n1042                                   0.028016                  -0.554669   \n1044                                   0.862133                   1.827160   \n1047                                  -0.877088                  -0.554669   \n\n      total_number_of_named_entities  \n3                          -0.819557  \n31                          0.310161  \n44                         -0.819557  \n63                         -0.254698  \n78                         -0.254698  \n...                              ...  \n1039                       -0.254698  \n1041                        0.310161  \n1042                        0.310161  \n1044                        1.439879  \n1047                       -0.819557  \n\n[280 rows x 42 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>num_strong_subjectivity_clues</th>\n      <th>disapproval</th>\n      <th>oprd</th>\n      <th>average_subtlex_us_zipf_of_words_per_word</th>\n      <th>total_number_of_words_more_than_two_syllables</th>\n      <th>num_negative_adjectives</th>\n      <th>total_number_of_pronouns</th>\n      <th>num_reflexive_pronouns</th>\n      <th>predet</th>\n      <th>path_dependency_npadvmod_count</th>\n      <th>...</th>\n      <th>confusion</th>\n      <th>pos_pattern_NOUN ADJ notNOUN</th>\n      <th>path_dependency_compound_count</th>\n      <th>sadness</th>\n      <th>neutral</th>\n      <th>num_epistemic_verbs</th>\n      <th>simple_proper_nouns_variation</th>\n      <th>average_number_of_named_entities_per_word</th>\n      <th>simple_numerals_variation</th>\n      <th>total_number_of_named_entities</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>0.640697</td>\n      <td>-0.402953</td>\n      <td>-0.174505</td>\n      <td>0.827470</td>\n      <td>-0.993872</td>\n      <td>-0.557049</td>\n      <td>0.368267</td>\n      <td>-0.198344</td>\n      <td>-0.159337</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>-0.291545</td>\n      <td>0</td>\n      <td>0.623345</td>\n      <td>-0.227810</td>\n      <td>0.165938</td>\n      <td>-0.587089</td>\n      <td>-0.968539</td>\n      <td>-0.877088</td>\n      <td>-0.554669</td>\n      <td>-0.819557</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>-0.130935</td>\n      <td>0.078973</td>\n      <td>-0.174505</td>\n      <td>1.017411</td>\n      <td>-0.993872</td>\n      <td>-0.557049</td>\n      <td>-0.304751</td>\n      <td>-0.198344</td>\n      <td>-0.159337</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>-0.267596</td>\n      <td>0</td>\n      <td>0.623345</td>\n      <td>-0.172228</td>\n      <td>0.600361</td>\n      <td>-0.587089</td>\n      <td>1.058955</td>\n      <td>-0.078466</td>\n      <td>-0.554669</td>\n      <td>0.310161</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>0.640697</td>\n      <td>0.178055</td>\n      <td>-0.174505</td>\n      <td>0.402897</td>\n      <td>-0.027633</td>\n      <td>2.455037</td>\n      <td>-0.977768</td>\n      <td>-0.198344</td>\n      <td>-0.159337</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>1.989689</td>\n      <td>0</td>\n      <td>1.724169</td>\n      <td>-0.203338</td>\n      <td>-0.695825</td>\n      <td>-0.587089</td>\n      <td>-0.968539</td>\n      <td>-0.877088</td>\n      <td>-0.554669</td>\n      <td>-0.819557</td>\n    </tr>\n    <tr>\n      <th>63</th>\n      <td>1.412328</td>\n      <td>-0.268673</td>\n      <td>-0.174505</td>\n      <td>0.710952</td>\n      <td>0.294446</td>\n      <td>0.948994</td>\n      <td>1.041285</td>\n      <td>-0.198344</td>\n      <td>-0.159337</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>-0.255401</td>\n      <td>0</td>\n      <td>0.623345</td>\n      <td>-0.195350</td>\n      <td>0.297840</td>\n      <td>-0.587089</td>\n      <td>1.058955</td>\n      <td>-0.451157</td>\n      <td>-0.554669</td>\n      <td>-0.254698</td>\n    </tr>\n    <tr>\n      <th>78</th>\n      <td>-0.130935</td>\n      <td>-0.317988</td>\n      <td>-0.174505</td>\n      <td>0.808317</td>\n      <td>-0.671792</td>\n      <td>0.948994</td>\n      <td>-0.304751</td>\n      <td>-0.198344</td>\n      <td>-0.159337</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>0.660068</td>\n      <td>0</td>\n      <td>-0.477478</td>\n      <td>0.644958</td>\n      <td>-0.794606</td>\n      <td>-0.587089</td>\n      <td>-0.968539</td>\n      <td>-0.113961</td>\n      <td>-0.554669</td>\n      <td>-0.254698</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1039</th>\n      <td>0.640697</td>\n      <td>-0.325288</td>\n      <td>-0.174505</td>\n      <td>-1.277839</td>\n      <td>-0.027633</td>\n      <td>-0.557049</td>\n      <td>-0.304751</td>\n      <td>-0.198344</td>\n      <td>-0.159337</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>-0.283811</td>\n      <td>0</td>\n      <td>-0.477478</td>\n      <td>-0.211977</td>\n      <td>0.821538</td>\n      <td>-0.587089</td>\n      <td>1.058955</td>\n      <td>0.223235</td>\n      <td>-0.554669</td>\n      <td>-0.254698</td>\n    </tr>\n    <tr>\n      <th>1041</th>\n      <td>-0.902566</td>\n      <td>-0.371350</td>\n      <td>-0.174505</td>\n      <td>0.211360</td>\n      <td>1.582765</td>\n      <td>-0.557049</td>\n      <td>0.368267</td>\n      <td>-0.198344</td>\n      <td>-0.159337</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>-0.281731</td>\n      <td>0</td>\n      <td>-0.477478</td>\n      <td>-0.219041</td>\n      <td>0.841377</td>\n      <td>-0.587089</td>\n      <td>1.058955</td>\n      <td>0.489443</td>\n      <td>-0.554669</td>\n      <td>0.310161</td>\n    </tr>\n    <tr>\n      <th>1042</th>\n      <td>2.183960</td>\n      <td>-0.315399</td>\n      <td>-0.174505</td>\n      <td>-0.866035</td>\n      <td>0.616526</td>\n      <td>-0.557049</td>\n      <td>-0.304751</td>\n      <td>-0.198344</td>\n      <td>-0.159337</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>-0.277773</td>\n      <td>0</td>\n      <td>-0.477478</td>\n      <td>-0.189569</td>\n      <td>0.367569</td>\n      <td>-0.587089</td>\n      <td>1.058955</td>\n      <td>0.028016</td>\n      <td>-0.554669</td>\n      <td>0.310161</td>\n    </tr>\n    <tr>\n      <th>1044</th>\n      <td>-0.902566</td>\n      <td>-0.349364</td>\n      <td>-0.174505</td>\n      <td>0.212956</td>\n      <td>2.549004</td>\n      <td>-0.557049</td>\n      <td>-0.304751</td>\n      <td>-0.198344</td>\n      <td>-0.159337</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>-0.243510</td>\n      <td>0</td>\n      <td>-0.477478</td>\n      <td>-0.125412</td>\n      <td>0.730843</td>\n      <td>-0.587089</td>\n      <td>1.058955</td>\n      <td>0.862133</td>\n      <td>1.827160</td>\n      <td>1.439879</td>\n    </tr>\n    <tr>\n      <th>1047</th>\n      <td>0.640697</td>\n      <td>-0.376278</td>\n      <td>-0.174505</td>\n      <td>0.158687</td>\n      <td>-0.671792</td>\n      <td>-0.557049</td>\n      <td>-0.304751</td>\n      <td>-0.198344</td>\n      <td>-0.159337</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>-0.271270</td>\n      <td>0</td>\n      <td>-0.477478</td>\n      <td>-0.233355</td>\n      <td>-1.004001</td>\n      <td>-0.587089</td>\n      <td>-0.968539</td>\n      <td>-0.877088</td>\n      <td>-0.554669</td>\n      <td>-0.819557</td>\n    </tr>\n  </tbody>\n</table>\n<p>280 rows × 42 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### T-test to determing the most significant features out of all in both predictions and mispredictions","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom scipy.stats import ttest_ind, chi2_contingency\n\n# Assuming boolean_df contains only boolean features\nboolean_features = boolean_df.columns\n\n# # Drop columns that are not features\n# important_features_df = important_features_df.drop(columns=['sentence', 'label'])\n\n# Create DataFrames for correctly predicted and mispredicted samples\ncorrect_indices = list(set(range(len(labels))) - set(mispred_indices))\ncorrect_features_df = important_features_df.iloc[correct_indices]\nmispred_features_df = important_features_df.iloc[mispred_indices]\n\n# Initialize lists to hold feature names and p-values\nfeature_names = []\np_values = []\n\n# Iterate over each feature\nfor feature in important_features_df.columns:\n    try:\n        # Check if feature is boolean\n        if feature in boolean_features:\n            # Perform chi-square test for boolean features\n            contingency_table = pd.crosstab(\n                important_features_df.loc[correct_indices, feature],\n                important_features_df.loc[mispred_indices, feature]\n            )\n            # Only perform the test if the contingency table is valid\n            if contingency_table.shape[0] > 1 and contingency_table.shape[1] > 1:\n                chi2, p, _, _ = chi2_contingency(contingency_table)\n            else:\n                p = 1.0\n        else:\n            # Perform t-test for continuous features\n            correct_values = correct_features_df[feature]\n            mispred_values = mispred_features_df[feature]\n            \n            # Check for variance to avoid precision loss\n            if correct_values.var(axis=0) > 0 and mispred_values.var(axis=0) > 0:\n                _, p = ttest_ind(correct_values, mispred_values, equal_var=False)\n            else:\n                p = 1.0\n\n        feature_names.append(feature)\n        p_values.append(p)\n\n    except Exception as e:\n        # Handle any unexpected errors by assigning a high p-value\n        print(f\"Error processing feature {feature}: {e}\")\n        feature_names.append(feature)\n        p_values.append(1.0)\n\n# Create a DataFrame with feature names and p-values\nfeature_significance_df = pd.DataFrame({\n    'feature': feature_names,\n    'p_value': p_values\n})\n\n# Ensure all p-values are numeric and sort the DataFrame\nfeature_significance_df['p_value'] = pd.to_numeric(feature_significance_df['p_value'], errors='coerce')\nfeature_significance_df = feature_significance_df.sort_values(by='p_value', ascending=True)\n\n# Display the most significant features\nprint(\"Most Significant Features for BERT Mispredictions:\")\nprint(feature_significance_df.head(10))\n\n# Optionally save to a CSV file\nfeature_significance_df.to_csv('feature_significance_mispredictions_bert.csv', index=False)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:25:43.567215Z","iopub.execute_input":"2024-08-23T00:25:43.567964Z","iopub.status.idle":"2024-08-23T00:25:43.666652Z","shell.execute_reply.started":"2024-08-23T00:25:43.567920Z","shell.execute_reply":"2024-08-23T00:25:43.665367Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"Most Significant Features for BERT Mispredictions:\n                                          feature   p_value\n40                      simple_numerals_variation  0.000010\n39      average_number_of_named_entities_per_word  0.000384\n41                 total_number_of_named_entities  0.000993\n34                 path_dependency_compound_count  0.003364\n30                    path_dependency_nsubj_count  0.016905\n4   total_number_of_words_more_than_two_syllables  0.039703\n27                    ratio_emotive_factive_verbs  0.045763\n25                      path_dependency_dep_count  0.102507\n38                  simple_proper_nouns_variation  0.106531\n26                                         relief  0.113787\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scipy/stats/_axis_nan_policy.py:523: RuntimeWarning: Precision loss occurred in moment calculation due to catastrophic cancellation. This occurs when the data are nearly identical. Results may be unreliable.\n  res = hypotest_fun_out(*samples, **kwds)\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set a style for the plot\nsns.set(style=\"whitegrid\")\n\n# Plot the top 10 most significant features\ntop_features = feature_significance_df.head(10)\n\nplt.figure(figsize=(12, 8))\nsns.barplot(x='p_value', y='feature', data=top_features, palette='viridis', orient='h')\n\nplt.title('Top 10 Most Significant Features for BERT Mispredictions (NewsSD-EN)')\nplt.xlabel('P-value (Lower is More Significant)')\nplt.ylabel('Feature')\nplt.savefig('bert_mispredictions_news.png')\n\n# # Invert y-axis to have the most significant feature at the top\n# plt.gca().invert_yaxis()\n\n# Display the plot\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:25:43.669021Z","iopub.execute_input":"2024-08-23T00:25:43.669456Z","iopub.status.idle":"2024-08-23T00:25:44.340371Z","shell.execute_reply.started":"2024-08-23T00:25:43.669415Z","shell.execute_reply":"2024-08-23T00:25:44.339047Z"},"trusted":true},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x800 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### Analysis of the most important features per category of mispredictions","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom scipy.stats import ttest_ind, chi2_contingency\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Assuming boolean_df contains only boolean features\nboolean_features = boolean_df.columns\n\n# # Drop columns that are not features\n# important_features_df = important_features_df.drop(columns=['sentence', 'label'])\n\n# Create DataFrames for correctly predicted and mispredicted samples\ncorrect_indices = list(set(range(len(labels))) - set(mispred_indices))\ncorrect_features_df = important_features_df.iloc[correct_indices]\n\n# Divide the correct dataframe according to their true label\ncorrect_subjective_indices = [i for i in correct_indices if labels[i] == 1]\ncorrect_objective_indices = [i for i in correct_indices if labels[i] == 0]\n\ncorrect_subjective_df = important_features_df.iloc[correct_subjective_indices]\ncorrect_objective_df = important_features_df.iloc[correct_objective_indices]\n\n# Separate mispredictions by their true labels\nsubjective_indices = [i for i in mispred_indices if labels[i] == 1]\nobjective_indices = [i for i in mispred_indices if labels[i] == 0]\n\n# Create DataFrames for subjective and objective mispredictions\nmispred_as_objective_df = important_features_df.iloc[subjective_indices]\nmispred_as_subjective_df = important_features_df.iloc[objective_indices]\n\n# Function to calculate significance\ndef calculate_significance(correct_df, mispred_df, boolean_features):\n    feature_names = []\n    p_values = []\n    \n    for feature in important_features_df.columns:\n        try:\n            if feature in boolean_features:\n                # Perform chi-square test for boolean features\n                contingency_table = pd.crosstab(\n                    correct_df[feature],\n                    mispred_df[feature]\n                )\n                # Only perform the test if the contingency table is valid\n                if contingency_table.shape[0] > 1 and contingency_table.shape[1] > 1:\n                    chi2, p, _, _ = chi2_contingency(contingency_table)\n                else:\n                    p = 1.0\n            else:\n                # Perform t-test for continuous features\n                correct_values = correct_df[feature]\n                mispred_values = mispred_df[feature]\n                \n                # Check for variance to avoid precision loss\n                if correct_values.var(axis=0) > 0 and mispred_values.var(axis=0) > 0:\n                    _, p = ttest_ind(correct_values, mispred_values, equal_var=False)\n                else:\n                    p = 1.0\n\n            feature_names.append(feature)\n            p_values.append(p)\n\n        except Exception as e:\n            # Handle any unexpected errors by assigning a high p-value\n            print(f\"Error processing feature {feature}: {e}\")\n            feature_names.append(feature)\n            p_values.append(1.0)\n    \n    significance_df = pd.DataFrame({\n        'feature': feature_names,\n        'p_value': p_values\n    })\n\n    # Ensure all p-values are numeric and sort the DataFrame\n    significance_df['p_value'] = pd.to_numeric(significance_df['p_value'], errors='coerce')\n    significance_df = significance_df.sort_values(by='p_value', ascending=True)\n    \n    return significance_df\n\n# Calculate significance for subjective and objective mispredictions\nsubjective_significance_df = calculate_significance(correct_subjective_df, mispred_as_subjective_df, boolean_features)\nobjective_significance_df = calculate_significance(correct_objective_df, mispred_as_objective_df, boolean_features)\n\n# Display the most significant features\nprint(\"Most Significant Features for Subjective Mispredictions:\")\nprint(subjective_significance_df.head(10))\n\nprint(\"\\nMost Significant Features for Objective Mispredictions:\")\nprint(objective_significance_df.head(10))\n\n# Optionally save to a CSV file\nsubjective_significance_df.to_csv('subjective_feature_significance_mispredictions.csv', index=False)\nobjective_significance_df.to_csv('objective_feature_significance_mispredictions.csv', index=False)\n\n# Plotting function\ndef plot_significant_features(significance_df, title):\n    plt.figure(figsize=(12, 8))\n    sns.barplot(x='p_value', y='feature', data=significance_df.head(10), palette='viridis', orient='h')\n    plt.title(title)\n    plt.xlabel('P-value (Lower is More Significant)')\n    plt.ylabel('Feature')\n    plt.savefig('bert_feature_significance_news.png')\n    plt.show()\n\n# Plot significant features for both types\n\nplot_significant_features(objective_significance_df, 'Top 10 Most Significant Features for BERT Mispredicted as Objective Sentences (NewsSD-EN)')\nplot_significant_features(subjective_significance_df, 'Top 10 Most Significant Features for BERT Mispredicted as Subjective Sentences (NewsSD-EN)')","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:25:44.342068Z","iopub.execute_input":"2024-08-23T00:25:44.342559Z","iopub.status.idle":"2024-08-23T00:25:45.798147Z","shell.execute_reply.started":"2024-08-23T00:25:44.342516Z","shell.execute_reply":"2024-08-23T00:25:45.796949Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scipy/stats/_axis_nan_policy.py:523: RuntimeWarning: Precision loss occurred in moment calculation due to catastrophic cancellation. This occurs when the data are nearly identical. Results may be unreliable.\n  res = hypotest_fun_out(*samples, **kwds)\n/opt/conda/lib/python3.10/site-packages/scipy/stats/_axis_nan_policy.py:523: RuntimeWarning: Precision loss occurred in moment calculation due to catastrophic cancellation. This occurs when the data are nearly identical. Results may be unreliable.\n  res = hypotest_fun_out(*samples, **kwds)\n","output_type":"stream"},{"name":"stdout","text":"Most Significant Features for Subjective Mispredictions:\n                                      feature       p_value\n31                 path_dependency_prep_count  5.388361e-11\n0               num_strong_subjectivity_clues  9.262736e-11\n5                     num_negative_adjectives  1.734929e-05\n36                                    neutral  3.774138e-05\n16         total_number_of_unique_auxiliaries  5.370358e-05\n1                                 disapproval  3.258483e-04\n6                    total_number_of_pronouns  3.495419e-04\n39  average_number_of_named_entities_per_word  4.326402e-04\n11                                  annoyance  1.217498e-03\n3   average_subtlex_us_zipf_of_words_per_word  1.246835e-03\n\nMost Significant Features for Objective Mispredictions:\n                                      feature       p_value\n40                  simple_numerals_variation  3.963232e-11\n39  average_number_of_named_entities_per_word  1.465359e-08\n41             total_number_of_named_entities  2.221009e-07\n3   average_subtlex_us_zipf_of_words_per_word  1.894019e-04\n31                 path_dependency_prep_count  5.014172e-04\n35                                    sadness  6.858040e-04\n0               num_strong_subjectivity_clues  7.343850e-04\n38              simple_proper_nouns_variation  1.395898e-03\n29                      ratio_epistemic_verbs  1.472520e-03\n30                path_dependency_nsubj_count  2.501916e-03\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x800 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x800 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"subjective_significance_df.head(60)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:25:45.799700Z","iopub.execute_input":"2024-08-23T00:25:45.800122Z","iopub.status.idle":"2024-08-23T00:25:45.815880Z","shell.execute_reply.started":"2024-08-23T00:25:45.800082Z","shell.execute_reply":"2024-08-23T00:25:45.814761Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"                                          feature       p_value\n31                     path_dependency_prep_count  5.388361e-11\n0                   num_strong_subjectivity_clues  9.262736e-11\n5                         num_negative_adjectives  1.734929e-05\n36                                        neutral  3.774138e-05\n16             total_number_of_unique_auxiliaries  5.370358e-05\n1                                     disapproval  3.258483e-04\n6                        total_number_of_pronouns  3.495419e-04\n39      average_number_of_named_entities_per_word  4.326402e-04\n11                                      annoyance  1.217498e-03\n3       average_subtlex_us_zipf_of_words_per_word  1.246835e-03\n20          average_number_of_adjectives_per_word  1.308049e-03\n10                                     num_modals  2.022318e-03\n2                                            oprd  2.206761e-03\n4   total_number_of_words_more_than_two_syllables  2.404335e-03\n13                                     admiration  6.305695e-03\n23                                    conditional  6.362132e-03\n41                 total_number_of_named_entities  8.918167e-03\n38                  simple_proper_nouns_variation  2.837720e-02\n17                      ratio_positive_adjectives  6.048571e-02\n24                                       optimism  6.860397e-02\n9                  path_dependency_npadvmod_count  7.497209e-02\n40                      simple_numerals_variation  1.162034e-01\n29                          ratio_epistemic_verbs  1.262964e-01\n27                    ratio_emotive_factive_verbs  1.578348e-01\n15             average_number_of_adverbs_per_word  1.691725e-01\n25                      path_dependency_dep_count  1.801952e-01\n22                           ratio_positive_verbs  2.292915e-01\n21                     simple_particles_variation  2.648302e-01\n7                          num_reflexive_pronouns  2.857249e-01\n8                                          predet  3.016535e-01\n12                                           attr  3.145435e-01\n14                                        preconj  3.579230e-01\n37                            num_epistemic_verbs  3.829102e-01\n34                 path_dependency_compound_count  4.449855e-01\n32                                      confusion  5.039549e-01\n18                                       surprise  5.075864e-01\n28                                     num_hedges  5.764788e-01\n30                    path_dependency_nsubj_count  7.099259e-01\n35                                        sadness  8.436035e-01\n26                                         relief  8.631907e-01\n33                   pos_pattern_NOUN ADJ notNOUN  1.000000e+00\n19                    pos_pattern_ADV ADJ notNOUN  1.000000e+00","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>feature</th>\n      <th>p_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>31</th>\n      <td>path_dependency_prep_count</td>\n      <td>5.388361e-11</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>num_strong_subjectivity_clues</td>\n      <td>9.262736e-11</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>num_negative_adjectives</td>\n      <td>1.734929e-05</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>neutral</td>\n      <td>3.774138e-05</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>total_number_of_unique_auxiliaries</td>\n      <td>5.370358e-05</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>disapproval</td>\n      <td>3.258483e-04</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>total_number_of_pronouns</td>\n      <td>3.495419e-04</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>average_number_of_named_entities_per_word</td>\n      <td>4.326402e-04</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>annoyance</td>\n      <td>1.217498e-03</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>average_subtlex_us_zipf_of_words_per_word</td>\n      <td>1.246835e-03</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>average_number_of_adjectives_per_word</td>\n      <td>1.308049e-03</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>num_modals</td>\n      <td>2.022318e-03</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>oprd</td>\n      <td>2.206761e-03</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>total_number_of_words_more_than_two_syllables</td>\n      <td>2.404335e-03</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>admiration</td>\n      <td>6.305695e-03</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>conditional</td>\n      <td>6.362132e-03</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>total_number_of_named_entities</td>\n      <td>8.918167e-03</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>simple_proper_nouns_variation</td>\n      <td>2.837720e-02</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>ratio_positive_adjectives</td>\n      <td>6.048571e-02</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>optimism</td>\n      <td>6.860397e-02</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>path_dependency_npadvmod_count</td>\n      <td>7.497209e-02</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>simple_numerals_variation</td>\n      <td>1.162034e-01</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>ratio_epistemic_verbs</td>\n      <td>1.262964e-01</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>ratio_emotive_factive_verbs</td>\n      <td>1.578348e-01</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>average_number_of_adverbs_per_word</td>\n      <td>1.691725e-01</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>path_dependency_dep_count</td>\n      <td>1.801952e-01</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>ratio_positive_verbs</td>\n      <td>2.292915e-01</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>simple_particles_variation</td>\n      <td>2.648302e-01</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>num_reflexive_pronouns</td>\n      <td>2.857249e-01</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>predet</td>\n      <td>3.016535e-01</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>attr</td>\n      <td>3.145435e-01</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>preconj</td>\n      <td>3.579230e-01</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>num_epistemic_verbs</td>\n      <td>3.829102e-01</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>path_dependency_compound_count</td>\n      <td>4.449855e-01</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>confusion</td>\n      <td>5.039549e-01</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>surprise</td>\n      <td>5.075864e-01</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>num_hedges</td>\n      <td>5.764788e-01</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>path_dependency_nsubj_count</td>\n      <td>7.099259e-01</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>sadness</td>\n      <td>8.436035e-01</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>relief</td>\n      <td>8.631907e-01</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>pos_pattern_NOUN ADJ notNOUN</td>\n      <td>1.000000e+00</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>pos_pattern_ADV ADJ notNOUN</td>\n      <td>1.000000e+00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## LLaMA\n### Acquisition of LLaMA sentence embeddings","metadata":{}},{"cell_type":"code","source":"# import torch\n# from transformers import AutoTokenizer, AutoModelForCausalLM\n# import os\n\n# os.environ[\"HUGGINGFACE_HUB_TOKEN\"] = \"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\"\n# token = os.getenv(\"HUGGINGFACE_HUB_TOKEN\")\n\n# # Set random seeds for reproducibility\n# torch.manual_seed(42)\n# np.random.seed(42)\n\n\n# # Load pre-trained LLaMA model and tokenizer\n# model_name = \"meta-llama/Meta-Llama-3.1-8B\"\n# tokenizer = AutoTokenizer.from_pretrained(model_name, use_auth_token=token)\n# if tokenizer.pad_token is None:\n#     tokenizer.add_special_tokens({'pad_token': '[PAD]'})\n\n# model = AutoModelForCausalLM.from_pretrained(\n#     model_name,\n#     use_auth_token=token,\n#     torch_dtype=torch.float16\n# )\n\n# # Check if CUDA is available and set the device\n# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n# print(f\"Using device: {device}\")\n\n# # Move the model to the selected device\n# model.to(device)\n\n# # Ensure the model is in evaluation mode\n# model.eval()\n\n# # Sample dataset (replace with your actual dataset)\n# sentences = news_df['sentence']\n\n# # Function to get LLaMA embeddings for a sentence\n# def get_sentence_embedding(sentence):\n#     # Tokenize the input sentence and get input IDs and attention mask\n#     inputs = tokenizer(sentence, return_tensors='pt', truncation=True, padding=True)\n    \n#     # Move inputs to the same device as the model\n#     inputs = {key: value.to(device) for key, value in inputs.items()}\n    \n#     # Get the output from LLaMA with output_hidden_states=True\n#     with torch.no_grad():\n#         outputs = model(**inputs, output_hidden_states=True)\n    \n#     # The hidden states are in the output's hidden_states attribute\n#     hidden_states = outputs.hidden_states\n#     # Take the mean of the last hidden state across the token dimension to get sentence embedding\n#     sentence_embedding = hidden_states[-1].mean(dim=1).squeeze().cpu().numpy()\n    \n#     return sentence_embedding\n\n# # Compute embeddings for all sentences\n# sentence_embeddings = [get_sentence_embedding(sentence) for sentence in sentences]\n\n# # If you want to convert the list of embeddings to a DataFrame (e.g., if using pandas)\n# import pandas as pd\n# llama_embedding_df = pd.DataFrame(sentence_embeddings)\n# llama_embedding_df.to_csv('llama_embeddings_news.csv')\n# llama_embedding_df.tail()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:25:45.819807Z","iopub.execute_input":"2024-08-23T00:25:45.820249Z","iopub.status.idle":"2024-08-23T00:25:45.827833Z","shell.execute_reply.started":"2024-08-23T00:25:45.820208Z","shell.execute_reply":"2024-08-23T00:25:45.826736Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"markdown","source":"### Training of an SVM on LLaMa sentence embeddings","metadata":{}},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.model_selection import KFold\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix\n\nllama_embedding_df = pd.read_csv('/kaggle/input/llama-embeddings-news/llama_embeddings_news.csv')\n\n# Ensure that llama_embedding_df and labels are in the correct format\nllama_embeddings = llama_embedding_df.values\nlabels = news_df['label'].values\n\n# Initialize K-Fold cross-validation with 5 folds\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\n# Lists to hold the evaluation metrics for each fold\naccuracy_list = []\nprecision_list = []\nrecall_list = []\nf1_list = []\nconf_matrix_list = []\nllama_mispred_indices = []\n\nfor train_index, test_index in kf.split(llama_embeddings):\n    X_train, X_test = llama_embeddings[train_index], llama_embeddings[test_index]\n    y_train, y_test = labels[train_index], labels[test_index]\n    \n    svm_model = SVC(kernel='linear', random_state=42)\n    svm_model.fit(X_train, y_train)\n    \n    y_pred = svm_model.predict(X_test)\n    \n    llama_mispred_indices.extend(test_index[y_test != y_pred])\n    \n    accuracy = accuracy_score(y_test, y_pred)\n    precision = precision_score(y_test, y_pred)\n    recall = recall_score(y_test, y_pred)\n    f1 = f1_score(y_test, y_pred)\n    conf_matrix = confusion_matrix(y_test, y_pred)\n    \n    accuracy_list.append(accuracy)\n    precision_list.append(precision)\n    recall_list.append(recall)\n    f1_list.append(f1)\n    conf_matrix_list.append(conf_matrix)\n\n# Collect mispredictions\nllama_mispred_sentences = news_df.iloc[llama_mispred_indices]['sentence'].tolist()\nllama_mispred_labels = labels[llama_mispred_indices]\n\nllama_mispredictions_df = pd.DataFrame(llama_mispred_sentences)\nllama_mispredictions_df['original_indices'] = llama_mispred_indices\nllama_mispredictions_df['original_labels'] = llama_mispred_labels\nllama_mispredictions_df['mispredicted_sentences'] = llama_mispredictions_df[0]\nllama_mispredictions_df = llama_mispredictions_df.drop(columns=[0])\n\n# Calculate average metrics\navg_accuracy = np.mean(accuracy_list)\navg_precision = np.mean(precision_list)\navg_recall = np.mean(recall_list)\navg_f1 = np.mean(f1_list)\navg_conf_matrix = np.mean(conf_matrix_list, axis=0)\n\nprint('LLaMA Embeddings')\nprint(f'Average Accuracy: {avg_accuracy}')\nprint(f'Average Precision: {avg_precision}')\nprint(f'Average Recall: {avg_recall}')\nprint(f'Average F1 Score: {avg_f1}')\nprint('Average Confusion Matrix:')\nprint(avg_conf_matrix)\n\nllama_mispredictions_df.to_csv('llama_mispredictions_news.csv')\nllama_mispredictions_df.tail(100)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:25:45.829696Z","iopub.execute_input":"2024-08-23T00:25:45.830143Z","iopub.status.idle":"2024-08-23T00:25:59.404108Z","shell.execute_reply.started":"2024-08-23T00:25:45.830077Z","shell.execute_reply":"2024-08-23T00:25:59.403000Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"LLaMA Embeddings\nAverage Accuracy: 0.7587650945545682\nAverage Precision: 0.7065250599354507\nAverage Recall: 0.6648265243296441\nAverage F1 Score: 0.6827155468890497\nAverage Confusion Matrix:\n[[104.8  22.8]\n [ 27.8  54.4]]\n","output_type":"stream"},{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"     original_indices  original_labels  \\\n153               219                1   \n154               226                1   \n155               233                0   \n156               253                1   \n157               372                1   \n..                ...              ...   \n248              1025                0   \n249              1036                1   \n250              1039                1   \n251              1041                1   \n252              1042                0   \n\n                                mispredicted_sentences  \n153          Moreover, these forces are thoughtless.\\n  \n154  From bad taxation, reckless borrowing and reck...  \n155  So now there is a movement—a movement within g...  \n156  The spenders were the ones elected to office a...  \n157  I-93 in Boston is kind of a racist road in tha...  \n..                                                 ...  \n248  Assuming, that is, that environmentalists want...  \n249  Chinese crime, like Chinese cuisine, varies ac...  \n250  The single issue that overcame all others: Mr....  \n251  In this capacity, he is editor and publisher o...  \n252  [JF: Dr. John Tanton was, of course, the great...  \n\n[100 rows x 3 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>original_indices</th>\n      <th>original_labels</th>\n      <th>mispredicted_sentences</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>153</th>\n      <td>219</td>\n      <td>1</td>\n      <td>Moreover, these forces are thoughtless.\\n</td>\n    </tr>\n    <tr>\n      <th>154</th>\n      <td>226</td>\n      <td>1</td>\n      <td>From bad taxation, reckless borrowing and reck...</td>\n    </tr>\n    <tr>\n      <th>155</th>\n      <td>233</td>\n      <td>0</td>\n      <td>So now there is a movement—a movement within g...</td>\n    </tr>\n    <tr>\n      <th>156</th>\n      <td>253</td>\n      <td>1</td>\n      <td>The spenders were the ones elected to office a...</td>\n    </tr>\n    <tr>\n      <th>157</th>\n      <td>372</td>\n      <td>1</td>\n      <td>I-93 in Boston is kind of a racist road in tha...</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>248</th>\n      <td>1025</td>\n      <td>0</td>\n      <td>Assuming, that is, that environmentalists want...</td>\n    </tr>\n    <tr>\n      <th>249</th>\n      <td>1036</td>\n      <td>1</td>\n      <td>Chinese crime, like Chinese cuisine, varies ac...</td>\n    </tr>\n    <tr>\n      <th>250</th>\n      <td>1039</td>\n      <td>1</td>\n      <td>The single issue that overcame all others: Mr....</td>\n    </tr>\n    <tr>\n      <th>251</th>\n      <td>1041</td>\n      <td>1</td>\n      <td>In this capacity, he is editor and publisher o...</td>\n    </tr>\n    <tr>\n      <th>252</th>\n      <td>1042</td>\n      <td>0</td>\n      <td>[JF: Dr. John Tanton was, of course, the great...</td>\n    </tr>\n  </tbody>\n</table>\n<p>100 rows × 3 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Mapping of the mispredictions of LLaMA to the linguistic features","metadata":{}},{"cell_type":"code","source":"llama_mispredictions_df = pd.read_csv('llama_mispredictions_news.csv')\n\nllama_mispred_indices = llama_mispredictions_df['original_indices']\n\n# Collect mispredictions\nllama_mispred_sentences = news_df.iloc[llama_mispred_indices]['sentence'].tolist()\nllama_mispred_labels = labels[llama_mispred_indices]\n\n# Map misprediction indices to the original features\nllama_mispred_features_df = important_features_df.iloc[llama_mispred_indices]\n\n# Display mispredicted features\nllama_mispred_features_df.tail(1000)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:25:59.405447Z","iopub.execute_input":"2024-08-23T00:25:59.405768Z","iopub.status.idle":"2024-08-23T00:25:59.440610Z","shell.execute_reply.started":"2024-08-23T00:25:59.405742Z","shell.execute_reply":"2024-08-23T00:25:59.439403Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"      num_strong_subjectivity_clues  disapproval      oprd  \\\n3                          0.640697    -0.402953 -0.174505   \n23                        -0.130935    -0.371724 -0.174505   \n59                         0.640697    -0.360317 -0.174505   \n63                         1.412328    -0.268673 -0.174505   \n67                        -0.902566    -0.158784 -0.174505   \n...                             ...          ...       ...   \n1025                      -0.130935    -0.385878 -0.174505   \n1036                      -0.130935    -0.324311 -0.174505   \n1039                       0.640697    -0.325288 -0.174505   \n1041                      -0.902566    -0.371350 -0.174505   \n1042                       2.183960    -0.315399 -0.174505   \n\n      average_subtlex_us_zipf_of_words_per_word  \\\n3                                      0.827470   \n23                                     0.177841   \n59                                     0.066111   \n63                                     0.710952   \n67                                     1.451561   \n...                                         ...   \n1025                                  -1.641759   \n1036                                  -1.656124   \n1039                                  -1.277839   \n1041                                   0.211360   \n1042                                  -0.866035   \n\n      total_number_of_words_more_than_two_syllables  num_negative_adjectives  \\\n3                                         -0.993872                -0.557049   \n23                                        -0.671792                -0.557049   \n59                                        -1.315952                -0.557049   \n63                                         0.294446                 0.948994   \n67                                        -1.315952                -0.557049   \n...                                             ...                      ...   \n1025                                      -0.349713                -0.557049   \n1036                                      -0.349713                -0.557049   \n1039                                      -0.027633                -0.557049   \n1041                                       1.582765                -0.557049   \n1042                                       0.616526                -0.557049   \n\n      total_number_of_pronouns  num_reflexive_pronouns    predet  \\\n3                     0.368267               -0.198344 -0.159337   \n23                   -0.304751               -0.198344  5.232429   \n59                    1.714303               -0.198344 -0.159337   \n63                    1.041285               -0.198344 -0.159337   \n67                    0.368267               -0.198344 -0.159337   \n...                        ...                     ...       ...   \n1025                 -0.977768               -0.198344 -0.159337   \n1036                 -0.977768               -0.198344 -0.159337   \n1039                 -0.304751               -0.198344 -0.159337   \n1041                  0.368267               -0.198344 -0.159337   \n1042                 -0.304751               -0.198344 -0.159337   \n\n      path_dependency_npadvmod_count  ...  confusion  \\\n3                          -0.168616  ...  -0.291545   \n23                         -0.168616  ...  -0.273064   \n59                         -0.168616  ...  -0.216650   \n63                         -0.168616  ...  -0.255401   \n67                         -0.168616  ...  -0.262953   \n...                              ...  ...        ...   \n1025                       -0.168616  ...  -0.216484   \n1036                       -0.168616  ...  -0.138218   \n1039                       -0.168616  ...  -0.283811   \n1041                       -0.168616  ...  -0.281731   \n1042                       -0.168616  ...  -0.277773   \n\n      pos_pattern_NOUN ADJ notNOUN  path_dependency_compound_count   sadness  \\\n3                                0                        0.623345 -0.227810   \n23                               0                       -0.477478  0.019884   \n59                               0                       -0.477478 -0.214526   \n63                               0                        0.623345 -0.195350   \n67                               0                       -0.477478  0.186217   \n...                            ...                             ...       ...   \n1025                             0                       -0.477478 -0.221994   \n1036                             0                       -0.477478 -0.225224   \n1039                             0                       -0.477478 -0.211977   \n1041                             0                       -0.477478 -0.219041   \n1042                             0                       -0.477478 -0.189569   \n\n       neutral  num_epistemic_verbs  simple_proper_nouns_variation  \\\n3     0.165938            -0.587089                      -0.968539   \n23   -1.133720            -0.587089                       1.058955   \n59   -2.009667             2.595632                      -0.968539   \n63    0.297840            -0.587089                       1.058955   \n67    0.367903            -0.587089                       1.058955   \n...        ...                  ...                            ...   \n1025  0.994611             1.004271                      -0.968539   \n1036  0.479853            -0.587089                      -0.968539   \n1039  0.821538            -0.587089                       1.058955   \n1041  0.841377            -0.587089                       1.058955   \n1042  0.367569            -0.587089                       1.058955   \n\n      average_number_of_named_entities_per_word  simple_numerals_variation  \\\n3                                     -0.877088                  -0.554669   \n23                                    -0.220444                  -0.554669   \n59                                    -0.877088                  -0.554669   \n63                                    -0.451157                  -0.554669   \n67                                     0.223235                  -0.554669   \n...                                         ...                        ...   \n1025                                  -0.877088                  -0.554669   \n1036                                   1.660755                  -0.554669   \n1039                                   0.223235                  -0.554669   \n1041                                   0.489443                  -0.554669   \n1042                                   0.028016                  -0.554669   \n\n      total_number_of_named_entities  \n3                          -0.819557  \n23                         -0.254698  \n59                         -0.819557  \n63                         -0.254698  \n67                         -0.254698  \n...                              ...  \n1025                       -0.819557  \n1036                        0.310161  \n1039                       -0.254698  \n1041                        0.310161  \n1042                        0.310161  \n\n[253 rows x 42 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>num_strong_subjectivity_clues</th>\n      <th>disapproval</th>\n      <th>oprd</th>\n      <th>average_subtlex_us_zipf_of_words_per_word</th>\n      <th>total_number_of_words_more_than_two_syllables</th>\n      <th>num_negative_adjectives</th>\n      <th>total_number_of_pronouns</th>\n      <th>num_reflexive_pronouns</th>\n      <th>predet</th>\n      <th>path_dependency_npadvmod_count</th>\n      <th>...</th>\n      <th>confusion</th>\n      <th>pos_pattern_NOUN ADJ notNOUN</th>\n      <th>path_dependency_compound_count</th>\n      <th>sadness</th>\n      <th>neutral</th>\n      <th>num_epistemic_verbs</th>\n      <th>simple_proper_nouns_variation</th>\n      <th>average_number_of_named_entities_per_word</th>\n      <th>simple_numerals_variation</th>\n      <th>total_number_of_named_entities</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>0.640697</td>\n      <td>-0.402953</td>\n      <td>-0.174505</td>\n      <td>0.827470</td>\n      <td>-0.993872</td>\n      <td>-0.557049</td>\n      <td>0.368267</td>\n      <td>-0.198344</td>\n      <td>-0.159337</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>-0.291545</td>\n      <td>0</td>\n      <td>0.623345</td>\n      <td>-0.227810</td>\n      <td>0.165938</td>\n      <td>-0.587089</td>\n      <td>-0.968539</td>\n      <td>-0.877088</td>\n      <td>-0.554669</td>\n      <td>-0.819557</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>-0.130935</td>\n      <td>-0.371724</td>\n      <td>-0.174505</td>\n      <td>0.177841</td>\n      <td>-0.671792</td>\n      <td>-0.557049</td>\n      <td>-0.304751</td>\n      <td>-0.198344</td>\n      <td>5.232429</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>-0.273064</td>\n      <td>0</td>\n      <td>-0.477478</td>\n      <td>0.019884</td>\n      <td>-1.133720</td>\n      <td>-0.587089</td>\n      <td>1.058955</td>\n      <td>-0.220444</td>\n      <td>-0.554669</td>\n      <td>-0.254698</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>0.640697</td>\n      <td>-0.360317</td>\n      <td>-0.174505</td>\n      <td>0.066111</td>\n      <td>-1.315952</td>\n      <td>-0.557049</td>\n      <td>1.714303</td>\n      <td>-0.198344</td>\n      <td>-0.159337</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>-0.216650</td>\n      <td>0</td>\n      <td>-0.477478</td>\n      <td>-0.214526</td>\n      <td>-2.009667</td>\n      <td>2.595632</td>\n      <td>-0.968539</td>\n      <td>-0.877088</td>\n      <td>-0.554669</td>\n      <td>-0.819557</td>\n    </tr>\n    <tr>\n      <th>63</th>\n      <td>1.412328</td>\n      <td>-0.268673</td>\n      <td>-0.174505</td>\n      <td>0.710952</td>\n      <td>0.294446</td>\n      <td>0.948994</td>\n      <td>1.041285</td>\n      <td>-0.198344</td>\n      <td>-0.159337</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>-0.255401</td>\n      <td>0</td>\n      <td>0.623345</td>\n      <td>-0.195350</td>\n      <td>0.297840</td>\n      <td>-0.587089</td>\n      <td>1.058955</td>\n      <td>-0.451157</td>\n      <td>-0.554669</td>\n      <td>-0.254698</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>-0.902566</td>\n      <td>-0.158784</td>\n      <td>-0.174505</td>\n      <td>1.451561</td>\n      <td>-1.315952</td>\n      <td>-0.557049</td>\n      <td>0.368267</td>\n      <td>-0.198344</td>\n      <td>-0.159337</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>-0.262953</td>\n      <td>0</td>\n      <td>-0.477478</td>\n      <td>0.186217</td>\n      <td>0.367903</td>\n      <td>-0.587089</td>\n      <td>1.058955</td>\n      <td>0.223235</td>\n      <td>-0.554669</td>\n      <td>-0.254698</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1025</th>\n      <td>-0.130935</td>\n      <td>-0.385878</td>\n      <td>-0.174505</td>\n      <td>-1.641759</td>\n      <td>-0.349713</td>\n      <td>-0.557049</td>\n      <td>-0.977768</td>\n      <td>-0.198344</td>\n      <td>-0.159337</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>-0.216484</td>\n      <td>0</td>\n      <td>-0.477478</td>\n      <td>-0.221994</td>\n      <td>0.994611</td>\n      <td>1.004271</td>\n      <td>-0.968539</td>\n      <td>-0.877088</td>\n      <td>-0.554669</td>\n      <td>-0.819557</td>\n    </tr>\n    <tr>\n      <th>1036</th>\n      <td>-0.130935</td>\n      <td>-0.324311</td>\n      <td>-0.174505</td>\n      <td>-1.656124</td>\n      <td>-0.349713</td>\n      <td>-0.557049</td>\n      <td>-0.977768</td>\n      <td>-0.198344</td>\n      <td>-0.159337</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>-0.138218</td>\n      <td>0</td>\n      <td>-0.477478</td>\n      <td>-0.225224</td>\n      <td>0.479853</td>\n      <td>-0.587089</td>\n      <td>-0.968539</td>\n      <td>1.660755</td>\n      <td>-0.554669</td>\n      <td>0.310161</td>\n    </tr>\n    <tr>\n      <th>1039</th>\n      <td>0.640697</td>\n      <td>-0.325288</td>\n      <td>-0.174505</td>\n      <td>-1.277839</td>\n      <td>-0.027633</td>\n      <td>-0.557049</td>\n      <td>-0.304751</td>\n      <td>-0.198344</td>\n      <td>-0.159337</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>-0.283811</td>\n      <td>0</td>\n      <td>-0.477478</td>\n      <td>-0.211977</td>\n      <td>0.821538</td>\n      <td>-0.587089</td>\n      <td>1.058955</td>\n      <td>0.223235</td>\n      <td>-0.554669</td>\n      <td>-0.254698</td>\n    </tr>\n    <tr>\n      <th>1041</th>\n      <td>-0.902566</td>\n      <td>-0.371350</td>\n      <td>-0.174505</td>\n      <td>0.211360</td>\n      <td>1.582765</td>\n      <td>-0.557049</td>\n      <td>0.368267</td>\n      <td>-0.198344</td>\n      <td>-0.159337</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>-0.281731</td>\n      <td>0</td>\n      <td>-0.477478</td>\n      <td>-0.219041</td>\n      <td>0.841377</td>\n      <td>-0.587089</td>\n      <td>1.058955</td>\n      <td>0.489443</td>\n      <td>-0.554669</td>\n      <td>0.310161</td>\n    </tr>\n    <tr>\n      <th>1042</th>\n      <td>2.183960</td>\n      <td>-0.315399</td>\n      <td>-0.174505</td>\n      <td>-0.866035</td>\n      <td>0.616526</td>\n      <td>-0.557049</td>\n      <td>-0.304751</td>\n      <td>-0.198344</td>\n      <td>-0.159337</td>\n      <td>-0.168616</td>\n      <td>...</td>\n      <td>-0.277773</td>\n      <td>0</td>\n      <td>-0.477478</td>\n      <td>-0.189569</td>\n      <td>0.367569</td>\n      <td>-0.587089</td>\n      <td>1.058955</td>\n      <td>0.028016</td>\n      <td>-0.554669</td>\n      <td>0.310161</td>\n    </tr>\n  </tbody>\n</table>\n<p>253 rows × 42 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### T-test to determine the most significant features out of all in both predictions and mispredictions","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom scipy.stats import ttest_ind, chi2_contingency\n\n# Assuming boolean_df contains only boolean features\nboolean_features = boolean_df.columns\n\n# Create DataFrames for correctly predicted and mispredicted samples\ncorrect_indices_llama = list(set(range(len(labels))) - set(llama_mispred_indices))\ncorrect_features_df_llama = important_features_df.iloc[correct_indices_llama]\nmispred_features_df_llama = important_features_df.iloc[llama_mispred_indices]\n\n# Initialize lists to hold feature names and p-values\nfeature_names = []\np_values = []\n\n# Iterate over each feature\nfor feature in important_features_df.columns:\n    try:\n        # Check if feature is boolean\n        if feature in boolean_features:\n            # Perform chi-square test for boolean features\n            contingency_table = pd.crosstab(\n                important_features_df.loc[correct_indices_llama, feature],\n                important_features_df.loc[llama_mispred_indices, feature]\n            )\n            # Only perform the test if the contingency table is valid\n            if contingency_table.shape[0] > 1 and contingency_table.shape[1] > 1:\n                chi2, p, _, _ = chi2_contingency(contingency_table)\n            else:\n                p = 1.0\n        else:\n            # Perform t-test for continuous features\n            correct_values = correct_features_df_llama[feature]\n            mispred_values = mispred_features_df_llama[feature]\n            \n            # Check for variance to avoid precision loss\n            if correct_values.var(axis=0) > 0 and mispred_values.var(axis=0) > 0:\n                _, p = ttest_ind(correct_values, mispred_values, equal_var=False)\n            else:\n                p = 1.0\n\n        feature_names.append(feature)\n        p_values.append(p)\n\n    except Exception as e:\n        # Handle any unexpected errors by assigning a high p-value\n        print(f\"Error processing feature {feature}: {e}\")\n        feature_names.append(feature)\n        p_values.append(1.0)\n\n# Create a DataFrame with feature names and p-values\nllama_feature_significance_df = pd.DataFrame({\n    'feature': feature_names,\n    'p_value': p_values\n})\n\n# Ensure all p-values are numeric and sort the DataFrame\nllama_feature_significance_df['p_value'] = pd.to_numeric(llama_feature_significance_df['p_value'], errors='coerce')\nllama_feature_significance_df = llama_feature_significance_df.sort_values(by='p_value', ascending=True)\n\nllama_feature_significance_df.to_csv('llama_feature_significance_mispredictions.csv', index=False)\n\n# Display the most significant features\nprint(\"Most Significant Features for Mispredictions (LLaMa):\")\nllama_feature_significance_df.head(10)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:25:59.442021Z","iopub.execute_input":"2024-08-23T00:25:59.442389Z","iopub.status.idle":"2024-08-23T00:25:59.539670Z","shell.execute_reply.started":"2024-08-23T00:25:59.442359Z","shell.execute_reply":"2024-08-23T00:25:59.538456Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"Most Significant Features for Mispredictions (LLaMa):\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scipy/stats/_axis_nan_policy.py:523: RuntimeWarning: Precision loss occurred in moment calculation due to catastrophic cancellation. This occurs when the data are nearly identical. Results may be unreliable.\n  res = hypotest_fun_out(*samples, **kwds)\n","output_type":"stream"},{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"                                          feature   p_value\n39      average_number_of_named_entities_per_word  0.000044\n41                 total_number_of_named_entities  0.000716\n40                      simple_numerals_variation  0.002418\n30                    path_dependency_nsubj_count  0.002439\n34                 path_dependency_compound_count  0.002521\n4   total_number_of_words_more_than_two_syllables  0.006054\n17                      ratio_positive_adjectives  0.007355\n23                                    conditional  0.012100\n37                            num_epistemic_verbs  0.015761\n38                  simple_proper_nouns_variation  0.016270","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>feature</th>\n      <th>p_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>39</th>\n      <td>average_number_of_named_entities_per_word</td>\n      <td>0.000044</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>total_number_of_named_entities</td>\n      <td>0.000716</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>simple_numerals_variation</td>\n      <td>0.002418</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>path_dependency_nsubj_count</td>\n      <td>0.002439</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>path_dependency_compound_count</td>\n      <td>0.002521</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>total_number_of_words_more_than_two_syllables</td>\n      <td>0.006054</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>ratio_positive_adjectives</td>\n      <td>0.007355</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>conditional</td>\n      <td>0.012100</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>num_epistemic_verbs</td>\n      <td>0.015761</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>simple_proper_nouns_variation</td>\n      <td>0.016270</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Set a style for the plot\nsns.set(style=\"whitegrid\")\n\n# Plot the top 10 most significant features\ntop_features = llama_feature_significance_df.head(10)\n\nplt.figure(figsize=(12, 8))\nsns.barplot(x='p_value', y='feature', data=top_features, palette='flare_r', orient='h')\n\nplt.title('Top 10 Most Significant Features for LLaMA Mispredictions (NewsSD-EN)')\nplt.xlabel('P-value (Lower is More Significant)')\nplt.ylabel('Feature')\nplt.savefig('llama_mispredictions_news.png')\n\n# # Invert y-axis to have the most significant feature at the top\n# plt.gca().invert_yaxis()\n\n# Display the plot\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:25:59.541025Z","iopub.execute_input":"2024-08-23T00:25:59.541400Z","iopub.status.idle":"2024-08-23T00:26:00.231231Z","shell.execute_reply.started":"2024-08-23T00:25:59.541370Z","shell.execute_reply":"2024-08-23T00:26:00.230147Z"},"trusted":true},"execution_count":26,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x800 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### Analysis of the most important features per category of mispredictions","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom scipy.stats import ttest_ind, chi2_contingency\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# boolean_df contains only boolean features\nboolean_features = boolean_df.columns\n\n# # Drop columns that are not features\n# all_features_df = all_features_df.drop(columns=['sentence', 'label'])\n\n#INITIAL METHOD\n# Create DataFrames for correctly predicted and mispredicted samples\nllama_correct_indices = list(set(range(len(labels))) - set(llama_mispred_indices))\nllama_correct_features_df = important_features_df.iloc[llama_correct_indices]\n\n# Divide the correct dataframe according to their true label\nllama_correct_subjective_indices = [i for i in llama_correct_indices if labels[i] == 1]\nllama_correct_objective_indices = [i for i in llama_correct_indices if labels[i] == 0]\n\nllama_correct_subjective_df = important_features_df.iloc[llama_correct_subjective_indices]\nllama_correct_objective_df = important_features_df.iloc[llama_correct_objective_indices]\n\n# Separate mispredictions by their true labels\nllama_subjective_indices = [i for i in llama_mispred_indices if labels[i] == 1]\nllama_objective_indices = [i for i in llama_mispred_indices if labels[i] == 0]\n\n# Create DataFrames for subjective and objective mispredictions\nmispred_as_objective_df = important_features_df.iloc[llama_subjective_indices]\nmispred_as_subjective_df = important_features_df.iloc[llama_objective_indices]\n\n# Function to calculate significance\ndef calculate_significance(correct_df, mispred_df, boolean_features):\n    feature_names = []\n    p_values = []\n    \n    for feature in important_features_df.columns:\n        try:\n            if feature in boolean_features:\n                # Perform chi-square test for boolean features\n                contingency_table = pd.crosstab(\n                    correct_df[feature],\n                    mispred_df[feature]\n                )\n                # Only perform the test if the contingency table is valid\n                if contingency_table.shape[0] > 1 and contingency_table.shape[1] > 1:\n                    chi2, p, _, _ = chi2_contingency(contingency_table)\n                else:\n                    p = 1.0\n            else:\n                # Perform t-test for continuous features\n                correct_values = correct_df[feature]\n                mispred_values = mispred_df[feature]\n                \n                # Check for variance to avoid precision loss\n                if correct_values.var(axis=0) > 0 and mispred_values.var(axis=0) > 0:\n                    _, p = ttest_ind(correct_values, mispred_values, equal_var=False)\n                else:\n                    p = 1.0\n\n            feature_names.append(feature)\n            p_values.append(p)\n\n        except Exception as e:\n            # Handle any unexpected errors by assigning a high p-value\n            print(f\"Error processing feature {feature}: {e}\")\n            feature_names.append(feature)\n            p_values.append(1.0)\n    \n    significance_df = pd.DataFrame({\n        'feature': feature_names,\n        'p_value': p_values\n    })\n\n    # Ensure all p-values are numeric and sort the DataFrame\n    significance_df['p_value'] = pd.to_numeric(significance_df['p_value'], errors='coerce')\n    significance_df = significance_df.sort_values(by='p_value', ascending=True)\n    \n    return significance_df\n\n# Calculate significance for subjective and objective mispredictions\nsubjective_significance_df = calculate_significance(llama_correct_subjective_df, mispred_as_subjective_df, boolean_features)\nobjective_significance_df = calculate_significance(llama_correct_objective_df, mispred_as_objective_df, boolean_features)\n\n# Display the most significant features\nprint(\"Most Significant Features for Subjective Mispredictions:\")\nprint(subjective_significance_df.head(10))\n\nprint(\"\\nMost Significant Features for Objective Mispredictions:\")\nprint(objective_significance_df.head(10))\n\n# Optionally save to a CSV file\nsubjective_significance_df.to_csv('subjective_feature_significance_mispredictions.csv', index=False)\nobjective_significance_df.to_csv('objective_feature_significance_mispredictions.csv', index=False)\n\n# Plotting function\ndef plot_significant_features(significance_df, title):\n    plt.figure(figsize=(12, 8))\n    sns.barplot(x='p_value', y='feature', data=significance_df.head(10), palette='flare_r', orient='h')\n    plt.title(title)\n    plt.xlabel('P-value (Lower is More Significant)')\n    plt.ylabel('Feature')\n    plt.savefig('llama_feature_significance_categories.png')\n    plt.show()\n\n# Plot significant features for both types\n\nplot_significant_features(subjective_significance_df, 'Top 10 Most Significant Features for LLaMA Mispredicted as Subjective Sentences (NewsSD-EN)')\nplot_significant_features(objective_significance_df, 'Top 10 Most Significant Features for LLaMA Mispredicted as Objective Sentences (NewsSD-EN)')\n","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:26:00.232736Z","iopub.execute_input":"2024-08-23T00:26:00.233075Z","iopub.status.idle":"2024-08-23T00:26:01.649213Z","shell.execute_reply.started":"2024-08-23T00:26:00.233046Z","shell.execute_reply":"2024-08-23T00:26:01.647967Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scipy/stats/_axis_nan_policy.py:523: RuntimeWarning: Precision loss occurred in moment calculation due to catastrophic cancellation. This occurs when the data are nearly identical. Results may be unreliable.\n  res = hypotest_fun_out(*samples, **kwds)\n/opt/conda/lib/python3.10/site-packages/scipy/stats/_axis_nan_policy.py:523: RuntimeWarning: Precision loss occurred in moment calculation due to catastrophic cancellation. This occurs when the data are nearly identical. Results may be unreliable.\n  res = hypotest_fun_out(*samples, **kwds)\n","output_type":"stream"},{"name":"stdout","text":"Most Significant Features for Subjective Mispredictions:\n                                          feature       p_value\n0                   num_strong_subjectivity_clues  6.630748e-07\n4   total_number_of_words_more_than_two_syllables  5.430982e-05\n10                                     num_modals  1.077131e-03\n1                                     disapproval  1.824712e-03\n5                         num_negative_adjectives  2.654551e-03\n16             total_number_of_unique_auxiliaries  5.376183e-03\n11                                      annoyance  5.624956e-03\n36                                        neutral  5.711786e-03\n39      average_number_of_named_entities_per_word  5.971925e-03\n24                                       optimism  1.236986e-02\n\nMost Significant Features for Objective Mispredictions:\n                                      feature       p_value\n39  average_number_of_named_entities_per_word  6.748264e-09\n40                  simple_numerals_variation  7.484472e-07\n41             total_number_of_named_entities  1.609990e-05\n38              simple_proper_nouns_variation  3.218089e-05\n0               num_strong_subjectivity_clues  5.214540e-05\n36                                    neutral  1.949650e-04\n29                      ratio_epistemic_verbs  2.627150e-04\n3   average_subtlex_us_zipf_of_words_per_word  2.693236e-04\n30                path_dependency_nsubj_count  9.261042e-04\n6                    total_number_of_pronouns  1.092100e-03\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x800 with 1 Axes>","image/png":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x800 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# import torch\n# from transformers import AutoTokenizer, AutoModelForCausalLM\n# import os\n\n# os.environ[\"HUGGINGFACE_HUB_TOKEN\"] = \"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\"\n# token = os.getenv(\"HUGGINGFACE_HUB_TOKEN\")\n\n# # Set random seeds for reproducibility\n# torch.manual_seed(42)\n# np.random.seed(42)\n\n\n# # Load pre-trained LLaMA model and tokenizer\n# model_name = \"meta-llama/Meta-Llama-3.1-8B\"\n# tokenizer = AutoTokenizer.from_pretrained(model_name, use_auth_token=token)\n# if tokenizer.pad_token is None:\n#     tokenizer.add_special_tokens({'pad_token': '[PAD]'})\n\n# model = AutoModelForCausalLM.from_pretrained(\n#     model_name,\n#     use_auth_token=token,\n#     torch_dtype=torch.float16\n# )\n\n# # Check if CUDA is available and set the device\n# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n# print(f\"Using device: {device}\")\n\n# # Move the model to the selected device\n# model.to(device)\n\n# # Ensure the model is in evaluation mode\n# model.eval()\n\n# # Dataset\n# sentences = subj_df['sentence']\n\n# # Function to get LLaMA embeddings for a sentence\n# def get_sentence_embedding(sentence):\n#     # Tokenize the input sentence and get input IDs and attention mask\n#     inputs = tokenizer(sentence, return_tensors='pt', truncation=True, padding=True)\n    \n#     # Move inputs to the same device as the model\n#     inputs = {key: value.to(device) for key, value in inputs.items()}\n    \n#     # Get the output from LLaMA with output_hidden_states=True\n#     with torch.no_grad():\n#         outputs = model(**inputs, output_hidden_states=True)\n    \n#     # The hidden states are in the output's hidden_states attribute\n#     hidden_states = outputs.hidden_states\n#     # Take the mean of the last hidden state across the token dimension to get sentence embedding\n#     sentence_embedding = hidden_states[-1].mean(dim=1).squeeze().cpu().numpy()\n    \n#     return sentence_embedding\n\n# # Compute embeddings for all sentences\n# sentence_embeddings = [get_sentence_embedding(sentence) for sentence in sentences]\n\n# # Export csv\n# llama_embedding_df = pd.DataFrame(sentence_embeddings)\n# llama_embedding_df.to_csv('llama_embeddings_subj.csv')\n# llama_embedding_df.tail()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:26:01.651042Z","iopub.execute_input":"2024-08-23T00:26:01.651513Z","iopub.status.idle":"2024-08-23T00:26:01.659979Z","shell.execute_reply.started":"2024-08-23T00:26:01.651472Z","shell.execute_reply":"2024-08-23T00:26:01.658780Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, roc_auc_score\nfrom sklearn.model_selection import train_test_split\n\n\ncorrect_features_df_llama['is_incorrect'] = 0\nmispred_features_df_llama['is_incorrect'] = 1\n\n# Combine the DataFrames\nllama_combined_df = pd.concat([correct_features_df_llama, mispred_features_df_llama])\n\n# Drop columns that should not be used as features (e.g., 'sentence', 'label')\nfeatures = llama_combined_df.drop(columns=['is_incorrect'])\n\n# Define the target variable\nX = features\ny = llama_combined_df['is_incorrect']\n\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n\n# Initialize the logistic regression model\nmodel = LogisticRegression(max_iter=1000)\n\n# Train the model\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nprint(\"Classification Report:\")\nprint(classification_report(y_test, y_pred))\nprint(\"ROC AUC Score:\")\nprint(roc_auc_score(y_test, model.predict_proba(X_test)[:, 1]))\n\n# Convert coefficients to odds ratios\nodds_ratios = pd.DataFrame({\n    'Feature': X.columns,\n    'Coefficient': model.coef_[0],\n    'Odds Ratio': np.exp(model.coef_[0])\n})\n\nodds_ratios = odds_ratios.sort_values(by='Odds Ratio', ascending=False)\nodds_ratios.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T00:26:01.661730Z","iopub.execute_input":"2024-08-23T00:26:01.662275Z","iopub.status.idle":"2024-08-23T00:26:01.752608Z","shell.execute_reply.started":"2024-08-23T00:26:01.662223Z","shell.execute_reply":"2024-08-23T00:26:01.751718Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stdout","text":"Classification Report:\n              precision    recall  f1-score   support\n\n           0       0.79      0.95      0.86       248\n           1       0.24      0.06      0.10        67\n\n    accuracy                           0.76       315\n   macro avg       0.51      0.50      0.48       315\nweighted avg       0.67      0.76      0.70       315\n\nROC AUC Score:\n0.5928623013962446\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_33/1615814653.py:6: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  correct_features_df_llama['is_incorrect'] = 0\n/tmp/ipykernel_33/1615814653.py:7: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  mispred_features_df_llama['is_incorrect'] = 1\n","output_type":"stream"},{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"                               Feature  Coefficient  Odds Ratio\n41      total_number_of_named_entities     0.240174    1.271471\n15  average_number_of_adverbs_per_word     0.202802    1.224830\n14                             preconj     0.185172    1.203426\n18                            surprise     0.134156    1.143571\n17           ratio_positive_adjectives     0.132732    1.141944\n35                             sadness     0.130326    1.139200\n9       path_dependency_npadvmod_count     0.126664    1.135035\n0        num_strong_subjectivity_clues     0.123447    1.131390\n12                                attr     0.118203    1.125473\n21          simple_particles_variation     0.092274    1.096665","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Feature</th>\n      <th>Coefficient</th>\n      <th>Odds Ratio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>41</th>\n      <td>total_number_of_named_entities</td>\n      <td>0.240174</td>\n      <td>1.271471</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>average_number_of_adverbs_per_word</td>\n      <td>0.202802</td>\n      <td>1.224830</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>preconj</td>\n      <td>0.185172</td>\n      <td>1.203426</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>surprise</td>\n      <td>0.134156</td>\n      <td>1.143571</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>ratio_positive_adjectives</td>\n      <td>0.132732</td>\n      <td>1.141944</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>sadness</td>\n      <td>0.130326</td>\n      <td>1.139200</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>path_dependency_npadvmod_count</td>\n      <td>0.126664</td>\n      <td>1.135035</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>num_strong_subjectivity_clues</td>\n      <td>0.123447</td>\n      <td>1.131390</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>attr</td>\n      <td>0.118203</td>\n      <td>1.125473</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>simple_particles_variation</td>\n      <td>0.092274</td>\n      <td>1.096665</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]}]}